/**
 * General geo location code
 */
(function ($) {
  /**
   * Get location from smart_ip module
   */
  Drupal.behaviors.sunrunGeo = {
    attach: function ( context, settings ) {
      // Get from cookie
      if(typeof $.cookie === 'function'){
        var geolocation = $.cookie('geolocation');
        if(!geolocation){
          $.ajax({
            url: window.location.protocol + '//api.ipinfodb.com/v3/ip-city',
            jsonp: 'callback',
            jsonpCallback: 'infodbcallback',
            dataType: 'jsonp',
            data: {
                key : settings.sunrun_geocontent.infodb_key,
                format: 'json',
            },
            // Save results in cookie
            success: function(response) {
              if(response.statusCode == 'OK'){
                $.cookie('geolocation', JSON.stringify(response));
                // Set state
                setState(response);
              }
            }
          });
        } else {
          geolocation = JSON.parse(geolocation);
          // Set state
          setState(geolocation);
        }
      }
    }
  }
  // Set <state> tag
  function setState(geolocation) {
    $('state').once('sunrun-geo', function(){
      // Avoid undefined
      if('regionName' in geolocation){
        $(this).html(geolocation.regionName);
      }
    });
  }
})(jQuery);;
(function ($) {
  Drupal.behaviors.sunrun_click_to_call = {
    attach: function (context, settings) {
      var $clickToCallBtn = $('.click-to-call');
      var $submit = $('.click-to-call-form input[type=submit]');

      var form = '<div class="click-to-call-form">' +
        '<form action="' + settings.sunrun_click_to_call.action + '" method="POST">' +
        '<input type="hidden" name="oid" value="' + settings.sunrun_click_to_call.oid + '">' +
        '<input type="hidden" name="retURL" value="' + settings.sunrun_click_to_call.return_url + '">' +
        //'<input type="hidden" name="debug" value=1>' +

        '<div class="form-row">' +
          '<label for="first_name">First Name</label>' +
          '<input id="first_name" maxlength="40" name="first_name" size="20" type="text" placeholder="First Name" required=true/>' +
        '</div>' +

        '<div class="form-row">' +
          '<label for="last_name">Last Name</label>' +
          '<input id="last_name" maxlength="80" name="last_name" size="20" type="text" placeholder="Last Name" required=true/>' +
        '</div>' +

        '<div class="form-row">' +
          '<label for="phone">Phone</label>' +
          '<input id="phone" maxlength="40" name="phone" size="20" type="text" placeholder="(555) 555-5555" required=true/>' +
        '</div>' +

        '<div class="hidden">' +

          //channel
          '<input id="00N60000002YDag" name="00N60000002YDag" title="Channel" type="text" value="" /><br>' +

          //Lead Source
          '<input id="00N60000002YDal" name="00N60000002YDal" title="Lead Source" type="text" value="" /><br>' +

          //keywords
          '<input id="00N60000001au5F" maxlength="255" name="00N60000001au5F" size="20" type="text" value="" /><br>' +

          //content
          '<input id="00N600000037ZLs" maxlength="80" name="00N600000037ZLs" size="20" type="text" value="" /><br>' +

          //technology
          '<input  id="00N32000002iXJl" name="00N32000002iXJl" size="1" type="text" value="Sunrun.com Click-to-Call"><br>' +

          'Auto-dialer Opt-in:' +
          '<input id="00N6000000375eP" name="00N6000000375eP" type="checkbox" value="0"/><br>' +
        '</div>' +

        '<input type="submit" name="submit" value="' + settings.sunrun_click_to_call.button_text + '" class="btn-orange btn">' +

        '</form>' +
        '<p class="form-autodialer-opt-in">By clicking above, I authorize Sunrun to call me or send pre-recorded or text messages to me about Sunrun products and services at the telephone number above using an automatic telephone dialing system, even if I am on a national or state "Do Not Call" list. Message and data rates may apply. I understand that consent is not a condition of purchase.</p>' +
        '</div>';

      if(typeof($clickToCallBtn.popover) !== 'undefined') {
        $clickToCallBtn.popover({
          html: true,
          content: form,
          placement: 'top'
        }).parent().delegate('input[type=submit]', 'click', function() {
          submitValues();
        });
      }

      $submit.on('click', function() {
        submitValues();
      });

      function submitValues() {
        //channel
        if($.cookie('sr_tr[ch]')) {
          $('#00N60000002YDag').val($.cookie('sr_tr[ch]'));
        } else {
          $('#00N60000002YDag').val("Online");
        }
        //lead source
        if($.cookie('sr_tr[ls]')) {
          $('#00N60000002YDal').val($.cookie('sr_tr[ls]'));
        } else {
          $('#00N60000002YDal').val("Online: Direct Web");
        }

        $('#00N60000001au5F').val($.cookie('sr_tr[kw]')); //keywords
        $('#00N600000037ZLs').val($.cookie('sr_tr[utm_content]')); //content
      }
    }
  };

})(jQuery);
;
/**
 * Tracking code
 */
(function ($) {
  Drupal.behaviors.sunrunTracking = {
    attach: function ( context, settings ) {
      $('body').once('sunrun-tracking', function(data){
        var nid = 0;

        // retrieve current id node from the body class [page-node-xxx] that gets populated
        // by Drupal automatically for node.
        var $body = $('body.page-node');

        if ($body.length) {
          var bodyClasses = $body.attr('class').split(/\s+/);
          for (i in bodyClasses) {
            var c = bodyClasses[i];
            // confirm page-node-XXX class has been found
            if (c.length > 10 && c.substring(0, 10) === "page-node-") {
              nid = parseInt(c.substring(10), 10);
              break;
            }
          }
        }

        var params = {
            // this variable is purposely spelled without the double 'r' in referer
            http_referer: document.referrer,
            query_string: window.location.search.replace("?", ""),
            request_uri: window.location.pathname + window.location.search,
            nodeid: nid
        };
        $.ajax('/track', {
              'data': JSON.stringify(params),
              'type': 'POST',
              'processData': false,
              'contentType': 'application/json'
        });
      })
    }
  }
})(jQuery);
;
/**
 * Tracking code
 */
(function ($) {
  Drupal.behaviors.sunrunAnalitycs = {
    attach: function ( context, settings ) {
      /**
       * Track links on main nav
       */
      $('.navbar-nav.primary').once('sunrun-analitycs', function(data){
        // Do not track last link (Get Started)
        $(this).find('li:not(.last)').find('a').on('click', function(e){
          // Check external url
          var url = $(this).attr('href');
          if (!(/^https?:\/\//i.test(url))) {
            url = window.location.origin + url;
          }
          ga('send', 'event', 'navigation', 'global header', url);
        });
        // Track last link (Get Started)
        $(this).find('li.last').find('a').on('click', function(e){
          ga('send', 'event', 'navigation', 'get started ', settings.sunrun_tracking.full_url);
        });
      });
      /**
       * Track links on secondary nav
       */
      $('.navbar-nav.secondary').once('sunrun-analitycs', function(data){
        // Contact link
        $(this).find('li.contact > a:first').on('click', function(e){
          ga('send', 'event', 'navigation', 'global header', 'contact us');
        });
        // Click to call
        $(this).find('li.phone > a:first').on('click', function(e){
          ga('send', 'event', 'navigation', 'to: tel:18554786786', 'click-to-call');
        });
        // Click to call
        $(this).find('li.login > a:first').on('click', function(e){
          ga('send', 'event', 'engagement', 'click on customer.sunrun.com link', settings.sunrun_tracking.full_url);
        });
      });
      /**
       * Track footer menu links
       */
      $('#block-menu-menu-footer-links').once('sunrun-analitycs', function(data){
        // Menu links, first level
        $(this).find('ul.menu > li > a').on('click', function(e){
          // Check external url
          var url = $(this).attr('href');
          if (!(/^https?:\/\//i.test(url))) {
            url = window.location.origin + url;
          }
          ga('send', 'event', 'navigation', 'global footer', url);
        });
        // Click to call
        $(this).find('.dropdown-menu a').on('click', function(e){
          var state = $(this).html().trim();
          ga('send', 'event', 'navigation', 'global footer', state);
        });
      });
      /**
       * Track social menu links
       */
      $('.footer-social').once('sunrun-analitycs', function(data){
        // Facebook
        $(this).find('.fa-facebook').parent().on('click', function(e){
          ga('send', 'event', 'navigation', 'go to Facebook', settings.sunrun_tracking.full_url);
        });
        // Twitter
        $(this).find('.fa-twitter').parent().on('click', function(e){
          ga('send', 'event', 'navigation', 'go to Twitter', settings.sunrun_tracking.full_url);
        });
        // Youtube
        $(this).find('.fa-youtube').parent().on('click', function(e){
          ga('send', 'event', 'navigation', 'go to Youtube', settings.sunrun_tracking.full_url);
        });
        // G++
        $(this).find('.fa-google-plus').parent().on('click', function(e){
          ga('send', 'event', 'navigation', 'go to G++', settings.sunrun_tracking.full_url);
        });
      });
      /**
       * HOME: Promo blocks home page
       */
      $('body.front .view-id-promo_blocks a').once('sunrun-analitycs', function(data){
        $(this).on('click', function(e){
          ga('send', 'event', 'home page', $(this).find('span.title').html().trim(), $(this).attr('href'));
        });
      });
      /**
       * HOME: Go solar 4 steps
       */
      $('body.front .pane-bean-content-block-go-solar-4-steps-h').once('sunrun-analitycs', function(data){
        $(this).find('h4 a').on('click', function(e){
          ga('send', 'event', 'home page', $(this).html().trim(), $(this).attr('href'));
        });
        $(this).find('ul.steps li > a').on('click', function(e){
          var url = window.location.origin + $(this).attr('href');
          ga('send', 'event', 'home page', $(this).parent().find('h4 a').html().trim(), url);
        });
      });
      /**
       * HOME: Powering solar
       */
      $('body.front .pane-bean-content-block-powering-america-a').once('sunrun-analitycs', function(data){
        $(this).find('a').on('click', function(e){
          ga('send', 'event', 'home page', 'Learn More: Powering America', $(this).attr('href'));
        });
      });
      /**
       * HOME: Testimonials
       */
      $('body.front .pane-testimonials').once('sunrun-analitycs', function(data){
        $(this).find('a').on('click', function(e){
          ga('send', 'event', 'home page', 'Learn More: Testimonials', $(this).attr('href'));
        });
      });
      /**
       * CONTACT: Click to call
       */
      $('a.ctc-phone').once('sunrun-analitycs', function(data){
        $(this).on('click', function(e){
          ga('send', 'event', 'contact', 'to: tel:18554786786', 'click-to-call');
        });
      });
      /**
       * CONTACT: Email
       */
      $('a.ctc-email').once('sunrun-analitycs', function(data){
        $(this).on('click', function(e){
          ga('send', 'event', 'mailto', $(this).attr('href'), settings.sunrun_tracking.full_url);
        });
      });
      /**
       * CONTACT: Navigation
       */
      $('a.ctc-navigation').once('sunrun-analitycs', function(data){
        $(this).on('click', function(e){
          ga('send', 'event', 'navigation', 'contact', $(this).attr('href'));
        });
      });
      /**
       * CONTACT: Account
       */
      $('a.ctc-account').once('sunrun-analitycs', function(data){
        $(this).on('click', function(e){
          ga('send', 'event', 'engagement', 'click on customer.sunrun.com link', settings.sunrun_tracking.full_url);
        });
      });
      /**
       * ALL: External links
       */
      $('a[href^="http"]:not([href*="' + window.location.host  + '"])').once('sunrun-external', function(data){
        $(this).on('click', function(e){
          ga('send', 'event', 'navigation', settings.sunrun_tracking.full_url, 'to ' + $(this).attr('href'));
        });
      });
    }
  }

  /**
   * Google Analitycs custom command.
   */
  Drupal.ajax.prototype.commands.sunrun_ga = function(ajax, response, status) {
    if(response.nonInteraction){
      ga('send', 'event', response.category, response.action, response.label, response.value, {nonInteraction: 1});
    } else {
      ga('send', 'event', response.category, response.action, response.label, response.value);
    }
  }
})(jQuery);;
var zipcodes = [];
zipcodes = [
"00501",
"00544",
"01005",
"01027",
"01068",
"01420",
"01431",
"01432",
"01434",
"01440",
"01451",
"01452",
"01453",
"01463",
"01464",
"01469",
"01473",
"01474",
"01475",
"01501",
"01503",
"01504",
"01506",
"01507",
"01510",
"01515",
"01516",
"01518",
"01519",
"01523",
"01524",
"01527",
"01529",
"01531",
"01532",
"01534",
"01535",
"01536",
"01537",
"01540",
"01542",
"01543",
"01550",
"01560",
"01562",
"01566",
"01568",
"01569",
"01570",
"01571",
"01581",
"01582",
"01585",
"01588",
"01590",
"01601",
"01602",
"01603",
"01604",
"01605",
"01606",
"01607",
"01608",
"01609",
"01610",
"01611",
"01613",
"01653",
"01701",
"01702",
"01703",
"01704",
"01705",
"01718",
"01720",
"01721",
"01730",
"01731",
"01740",
"01741",
"01745",
"01746",
"01747",
"01748",
"01752",
"01754",
"01756",
"01757",
"01760",
"01770",
"01772",
"01773",
"01776",
"01778",
"01801",
"01803",
"01805",
"01810",
"01812",
"01813",
"01815",
"01821",
"01822",
"01824",
"01826",
"01827",
"01830",
"01831",
"01832",
"01833",
"01835",
"01840",
"01841",
"01842",
"01843",
"01844",
"01845",
"01850",
"01851",
"01852",
"01853",
"01854",
"01862",
"01863",
"01865",
"01866",
"01876",
"01879",
"01885",
"01886",
"01888",
"01890",
"01899",
"01901",
"01902",
"01903",
"01904",
"01905",
"01906",
"01907",
"01908",
"01910",
"01913",
"01915",
"01921",
"01922",
"01929",
"01930",
"01936",
"01944",
"01950",
"01951",
"01952",
"01965",
"01966",
"01970",
"01971",
"01982",
"01983",
"01984",
"01985",
"02018",
"02019",
"02021",
"02025",
"02026",
"02027",
"02030",
"02032",
"02035",
"02038",
"02050",
"02052",
"02053",
"02054",
"02056",
"02059",
"02060",
"02061",
"02065",
"02066",
"02067",
"02071",
"02072",
"02081",
"02090",
"02093",
"02108",
"02109",
"02110",
"02111",
"02112",
"02113",
"02114",
"02115",
"02116",
"02117",
"02118",
"02119",
"02120",
"02121",
"02122",
"02123",
"02124",
"02125",
"02126",
"02127",
"02128",
"02129",
"02130",
"02131",
"02132",
"02133",
"02134",
"02135",
"02136",
"02137",
"02138",
"02139",
"02140",
"02141",
"02142",
"02143",
"02144",
"02145",
"02148",
"02149",
"02150",
"02151",
"02152",
"02153",
"02155",
"02156",
"02163",
"02169",
"02170",
"02171",
"02176",
"02180",
"02186",
"02187",
"02188",
"02189",
"02190",
"02191",
"02196",
"02199",
"02201",
"02203",
"02204",
"02205",
"02206",
"02210",
"02211",
"02212",
"02215",
"02217",
"02222",
"02228",
"02238",
"02241",
"02266",
"02269",
"02283",
"02284",
"02293",
"02297",
"02298",
"02301",
"02302",
"02303",
"02304",
"02305",
"02322",
"02324",
"02325",
"02327",
"02330",
"02331",
"02332",
"02333",
"02334",
"02337",
"02338",
"02339",
"02340",
"02341",
"02343",
"02347",
"02348",
"02350",
"02351",
"02355",
"02356",
"02357",
"02358",
"02359",
"02360",
"02361",
"02362",
"02364",
"02366",
"02367",
"02368",
"02370",
"02375",
"02379",
"02382",
"02420",
"02421",
"02445",
"02446",
"02447",
"02451",
"02452",
"02453",
"02454",
"02455",
"02456",
"02458",
"02459",
"02460",
"02461",
"02462",
"02464",
"02465",
"02466",
"02467",
"02468",
"02471",
"02472",
"02474",
"02475",
"02476",
"02477",
"02492",
"02493",
"02494",
"02495",
"02538",
"02558",
"02571",
"02576",
"02702",
"02703",
"02712",
"02715",
"02717",
"02719",
"02720",
"02721",
"02722",
"02723",
"02724",
"02725",
"02726",
"02738",
"02739",
"02740",
"02741",
"02742",
"02743",
"02744",
"02745",
"02746",
"02747",
"02748",
"02762",
"02764",
"02766",
"02769",
"02770",
"02771",
"02777",
"02790",
"03031",
"03032",
"03033",
"03034",
"03036",
"03037",
"03038",
"03042",
"03043",
"03044",
"03045",
"03046",
"03047",
"03048",
"03049",
"03051",
"03052",
"03053",
"03054",
"03055",
"03057",
"03060",
"03061",
"03062",
"03063",
"03064",
"03070",
"03071",
"03077",
"03082",
"03084",
"03086",
"03087",
"03101",
"03102",
"03103",
"03104",
"03105",
"03106",
"03108",
"03109",
"03110",
"03215",
"03216",
"03217",
"03218",
"03220",
"03221",
"03222",
"03223",
"03224",
"03225",
"03227",
"03229",
"03230",
"03233",
"03234",
"03235",
"03237",
"03241",
"03242",
"03243",
"03244",
"03246",
"03249",
"03253",
"03255",
"03256",
"03257",
"03258",
"03259",
"03260",
"03261",
"03263",
"03264",
"03268",
"03269",
"03273",
"03275",
"03276",
"03278",
"03280",
"03281",
"03284",
"03285",
"03287",
"03290",
"03291",
"03301",
"03302",
"03303",
"03304",
"03307",
"03431",
"03440",
"03441",
"03442",
"03443",
"03444",
"03445",
"03446",
"03447",
"03448",
"03449",
"03450",
"03451",
"03452",
"03455",
"03456",
"03457",
"03458",
"03461",
"03462",
"03464",
"03465",
"03466",
"03467",
"03470",
"03743",
"03745",
"03751",
"03752",
"03753",
"03754",
"03770",
"03773",
"03782",
"03801",
"03802",
"03809",
"03811",
"03814",
"03816",
"03817",
"03818",
"03819",
"03820",
"03823",
"03824",
"03825",
"03826",
"03827",
"03832",
"03833",
"03835",
"03836",
"03837",
"03839",
"03840",
"03841",
"03842",
"03843",
"03844",
"03848",
"03849",
"03851",
"03852",
"03855",
"03856",
"03857",
"03858",
"03861",
"03862",
"03864",
"03865",
"03867",
"03868",
"03869",
"03870",
"03871",
"03872",
"03873",
"03874",
"03875",
"03878",
"03882",
"03883",
"03884",
"03885",
"03886",
"03887",
"03890",
"05501",
"05544",
"06001",
"06002",
"06006",
"06010",
"06011",
"06013",
"06016",
"06018",
"06019",
"06020",
"06021",
"06022",
"06023",
"06024",
"06025",
"06026",
"06027",
"06028",
"06029",
"06030",
"06031",
"06032",
"06033",
"06034",
"06035",
"06037",
"06039",
"06040",
"06041",
"06042",
"06043",
"06045",
"06049",
"06050",
"06051",
"06052",
"06053",
"06057",
"06058",
"06059",
"06060",
"06061",
"06062",
"06063",
"06064",
"06065",
"06066",
"06067",
"06068",
"06069",
"06070",
"06071",
"06072",
"06073",
"06074",
"06075",
"06076",
"06077",
"06078",
"06079",
"06080",
"06081",
"06082",
"06083",
"06084",
"06085",
"06087",
"06088",
"06089",
"06090",
"06091",
"06092",
"06093",
"06094",
"06095",
"06096",
"06098",
"06101",
"06102",
"06103",
"06104",
"06105",
"06106",
"06107",
"06108",
"06109",
"06110",
"06111",
"06112",
"06114",
"06115",
"06117",
"06118",
"06119",
"06120",
"06123",
"06126",
"06127",
"06128",
"06129",
"06131",
"06132",
"06133",
"06134",
"06137",
"06138",
"06140",
"06141",
"06142",
"06143",
"06144",
"06145",
"06146",
"06147",
"06150",
"06151",
"06152",
"06153",
"06154",
"06155",
"06156",
"06160",
"06161",
"06176",
"06180",
"06183",
"06199",
"06226",
"06230",
"06231",
"06232",
"06233",
"06234",
"06235",
"06237",
"06238",
"06239",
"06241",
"06242",
"06243",
"06244",
"06245",
"06246",
"06247",
"06248",
"06249",
"06250",
"06251",
"06254",
"06255",
"06256",
"06258",
"06259",
"06260",
"06262",
"06263",
"06264",
"06265",
"06266",
"06267",
"06268",
"06269",
"06277",
"06278",
"06279",
"06280",
"06281",
"06282",
"06320",
"06330",
"06331",
"06332",
"06333",
"06334",
"06335",
"06336",
"06337",
"06338",
"06339",
"06340",
"06349",
"06350",
"06351",
"06353",
"06354",
"06355",
"06357",
"06359",
"06360",
"06365",
"06370",
"06371",
"06372",
"06373",
"06374",
"06375",
"06376",
"06377",
"06378",
"06379",
"06380",
"06382",
"06383",
"06384",
"06385",
"06387",
"06388",
"06389",
"06401",
"06403",
"06404",
"06405",
"06408",
"06409",
"06410",
"06411",
"06412",
"06413",
"06414",
"06415",
"06416",
"06417",
"06418",
"06419",
"06420",
"06422",
"06423",
"06424",
"06426",
"06430",
"06431",
"06432",
"06436",
"06437",
"06438",
"06439",
"06440",
"06441",
"06442",
"06443",
"06444",
"06447",
"06450",
"06451",
"06454",
"06455",
"06456",
"06457",
"06459",
"06460",
"06461",
"06467",
"06468",
"06469",
"06470",
"06471",
"06472",
"06473",
"06474",
"06475",
"06477",
"06478",
"06479",
"06480",
"06481",
"06482",
"06483",
"06484",
"06487",
"06488",
"06489",
"06490",
"06491",
"06492",
"06493",
"06494",
"06497",
"06498",
"06501",
"06502",
"06503",
"06504",
"06505",
"06506",
"06507",
"06508",
"06509",
"06510",
"06511",
"06512",
"06513",
"06514",
"06515",
"06516",
"06517",
"06518",
"06519",
"06520",
"06521",
"06524",
"06525",
"06530",
"06531",
"06532",
"06533",
"06534",
"06535",
"06536",
"06537",
"06538",
"06540",
"06601",
"06602",
"06604",
"06605",
"06606",
"06607",
"06608",
"06610",
"06611",
"06612",
"06614",
"06615",
"06650",
"06673",
"06699",
"06701",
"06702",
"06703",
"06704",
"06705",
"06706",
"06708",
"06710",
"06712",
"06716",
"06720",
"06721",
"06722",
"06723",
"06724",
"06725",
"06726",
"06749",
"06750",
"06751",
"06752",
"06753",
"06754",
"06755",
"06756",
"06757",
"06758",
"06759",
"06762",
"06763",
"06770",
"06776",
"06777",
"06778",
"06779",
"06781",
"06782",
"06783",
"06784",
"06785",
"06786",
"06787",
"06790",
"06791",
"06793",
"06794",
"06795",
"06796",
"06798",
"06801",
"06804",
"06807",
"06810",
"06811",
"06812",
"06813",
"06814",
"06816",
"06817",
"06820",
"06824",
"06825",
"06829",
"06830",
"06831",
"06832",
"06836",
"06838",
"06840",
"06842",
"06850",
"06851",
"06852",
"06853",
"06854",
"06855",
"06856",
"06857",
"06858",
"06859",
"06860",
"06870",
"06875",
"06876",
"06877",
"06878",
"06879",
"06880",
"06881",
"06883",
"06888",
"06889",
"06890",
"06896",
"06897",
"06901",
"06902",
"06903",
"06904",
"06905",
"06906",
"06907",
"06910",
"06911",
"06912",
"06913",
"06920",
"06921",
"06922",
"06925",
"06926",
"06927",
"06928",
"07001",
"07002",
"07003",
"07004",
"07005",
"07006",
"07007",
"07008",
"07009",
"07010",
"07011",
"07012",
"07013",
"07014",
"07015",
"07016",
"07017",
"07018",
"07019",
"07020",
"07021",
"07022",
"07023",
"07024",
"07026",
"07027",
"07028",
"07029",
"07030",
"07031",
"07032",
"07033",
"07034",
"07035",
"07036",
"07039",
"07040",
"07041",
"07042",
"07043",
"07044",
"07045",
"07046",
"07047",
"07050",
"07051",
"07052",
"07054",
"07055",
"07057",
"07058",
"07059",
"07060",
"07061",
"07062",
"07063",
"07064",
"07065",
"07066",
"07067",
"07068",
"07069",
"07070",
"07071",
"07072",
"07073",
"07074",
"07075",
"07076",
"07077",
"07078",
"07079",
"07080",
"07081",
"07082",
"07083",
"07086",
"07087",
"07088",
"07090",
"07091",
"07092",
"07093",
"07094",
"07095",
"07096",
"07097",
"07102",
"07103",
"07104",
"07105",
"07106",
"07107",
"07108",
"07109",
"07110",
"07111",
"07112",
"07114",
"07201",
"07202",
"07203",
"07204",
"07205",
"07206",
"07207",
"07208",
"07302",
"07303",
"07304",
"07305",
"07306",
"07307",
"07310",
"07401",
"07403",
"07405",
"07407",
"07410",
"07416",
"07417",
"07418",
"07419",
"07420",
"07421",
"07422",
"07423",
"07424",
"07428",
"07430",
"07432",
"07435",
"07436",
"07438",
"07439",
"07440",
"07442",
"07444",
"07446",
"07450",
"07451",
"07452",
"07456",
"07457",
"07458",
"07460",
"07461",
"07462",
"07463",
"07465",
"07470",
"07474",
"07480",
"07481",
"07495",
"07501",
"07502",
"07503",
"07504",
"07505",
"07506",
"07507",
"07508",
"07509",
"07511",
"07512",
"07513",
"07514",
"07522",
"07524",
"07543",
"07601",
"07602",
"07603",
"07604",
"07605",
"07606",
"07607",
"07608",
"07620",
"07621",
"07624",
"07626",
"07627",
"07628",
"07630",
"07631",
"07632",
"07640",
"07641",
"07642",
"07643",
"07644",
"07645",
"07646",
"07647",
"07648",
"07649",
"07650",
"07652",
"07653",
"07656",
"07657",
"07660",
"07661",
"07662",
"07663",
"07666",
"07670",
"07675",
"07676",
"07677",
"07699",
"07701",
"07702",
"07703",
"07704",
"07709",
"07710",
"07711",
"07712",
"07715",
"07716",
"07717",
"07718",
"07719",
"07720",
"07721",
"07722",
"07723",
"07724",
"07726",
"07727",
"07728",
"07730",
"07731",
"07732",
"07733",
"07734",
"07735",
"07737",
"07738",
"07739",
"07740",
"07746",
"07747",
"07748",
"07750",
"07751",
"07752",
"07753",
"07754",
"07755",
"07756",
"07757",
"07758",
"07760",
"07762",
"07763",
"07764",
"07765",
"07799",
"07801",
"07802",
"07803",
"07806",
"07820",
"07821",
"07822",
"07823",
"07825",
"07826",
"07827",
"07828",
"07829",
"07830",
"07831",
"07832",
"07833",
"07834",
"07836",
"07837",
"07838",
"07840",
"07842",
"07843",
"07844",
"07845",
"07846",
"07847",
"07848",
"07849",
"07850",
"07851",
"07852",
"07853",
"07856",
"07857",
"07860",
"07863",
"07865",
"07866",
"07869",
"07870",
"07871",
"07874",
"07876",
"07878",
"07880",
"07881",
"07882",
"07885",
"07890",
"07901",
"07902",
"07920",
"07921",
"07922",
"07924",
"07926",
"07927",
"07928",
"07930",
"07931",
"07932",
"07933",
"07934",
"07935",
"07936",
"07938",
"07939",
"07940",
"07945",
"07946",
"07950",
"07960",
"07961",
"07962",
"07963",
"07970",
"07974",
"07976",
"07977",
"07978",
"07979",
"07980",
"07981",
"07999",
"08001",
"08002",
"08003",
"08004",
"08005",
"08006",
"08007",
"08008",
"08009",
"08010",
"08011",
"08012",
"08014",
"08015",
"08016",
"08019",
"08020",
"08021",
"08022",
"08023",
"08026",
"08027",
"08028",
"08029",
"08030",
"08031",
"08032",
"08033",
"08034",
"08035",
"08036",
"08037",
"08038",
"08039",
"08041",
"08042",
"08043",
"08045",
"08046",
"08048",
"08049",
"08050",
"08051",
"08052",
"08053",
"08054",
"08055",
"08056",
"08057",
"08059",
"08060",
"08061",
"08062",
"08063",
"08064",
"08065",
"08066",
"08067",
"08068",
"08069",
"08070",
"08071",
"08073",
"08074",
"08075",
"08076",
"08077",
"08078",
"08079",
"08080",
"08081",
"08083",
"08084",
"08085",
"08086",
"08087",
"08088",
"08089",
"08090",
"08091",
"08092",
"08093",
"08094",
"08095",
"08096",
"08097",
"08098",
"08099",
"08101",
"08102",
"08103",
"08104",
"08105",
"08106",
"08107",
"08108",
"08109",
"08110",
"08201",
"08202",
"08203",
"08204",
"08205",
"08210",
"08212",
"08213",
"08214",
"08215",
"08217",
"08221",
"08223",
"08224",
"08225",
"08226",
"08230",
"08232",
"08234",
"08240",
"08241",
"08242",
"08243",
"08244",
"08247",
"08248",
"08251",
"08252",
"08260",
"08270",
"08302",
"08310",
"08311",
"08312",
"08314",
"08315",
"08316",
"08317",
"08318",
"08319",
"08320",
"08321",
"08322",
"08323",
"08324",
"08326",
"08327",
"08328",
"08329",
"08330",
"08332",
"08340",
"08341",
"08342",
"08343",
"08344",
"08345",
"08346",
"08348",
"08349",
"08350",
"08352",
"08353",
"08360",
"08401",
"08402",
"08403",
"08404",
"08406",
"08501",
"08502",
"08504",
"08505",
"08510",
"08511",
"08512",
"08514",
"08515",
"08518",
"08520",
"08525",
"08526",
"08527",
"08528",
"08530",
"08533",
"08534",
"08535",
"08536",
"08540",
"08541",
"08542",
"08543",
"08544",
"08550",
"08551",
"08553",
"08554",
"08555",
"08556",
"08557",
"08558",
"08559",
"08560",
"08561",
"08562",
"08601",
"08602",
"08603",
"08604",
"08605",
"08606",
"08607",
"08608",
"08609",
"08610",
"08611",
"08618",
"08619",
"08620",
"08625",
"08628",
"08629",
"08638",
"08640",
"08641",
"08645",
"08646",
"08647",
"08648",
"08650",
"08666",
"08690",
"08691",
"08695",
"08701",
"08720",
"08721",
"08722",
"08723",
"08724",
"08730",
"08731",
"08732",
"08733",
"08734",
"08735",
"08736",
"08738",
"08739",
"08740",
"08741",
"08742",
"08750",
"08751",
"08752",
"08753",
"08754",
"08755",
"08756",
"08757",
"08758",
"08759",
"08801",
"08802",
"08803",
"08804",
"08805",
"08807",
"08808",
"08809",
"08810",
"08812",
"08816",
"08817",
"08818",
"08820",
"08821",
"08822",
"08823",
"08824",
"08825",
"08826",
"08827",
"08828",
"08829",
"08830",
"08831",
"08832",
"08833",
"08834",
"08835",
"08836",
"08837",
"08840",
"08844",
"08846",
"08848",
"08850",
"08852",
"08853",
"08854",
"08855",
"08857",
"08858",
"08859",
"08861",
"08862",
"08863",
"08865",
"08867",
"08868",
"08869",
"08870",
"08871",
"08872",
"08873",
"08875",
"08876",
"08879",
"08880",
"08882",
"08884",
"08885",
"08886",
"08887",
"08888",
"08889",
"08890",
"08899",
"08901",
"08902",
"08903",
"08904",
"08905",
"08906",
"08933",
"08989",
"10301",
"10302",
"10303",
"10304",
"10305",
"10306",
"10307",
"10308",
"10309",
"10310",
"10311",
"10312",
"10313",
"10314",
"10451",
"10452",
"10453",
"10454",
"10455",
"10456",
"10457",
"10458",
"10459",
"10460",
"10461",
"10462",
"10463",
"10464",
"10465",
"10466",
"10467",
"10468",
"10469",
"10470",
"10471",
"10472",
"10473",
"10474",
"10475",
"10502",
"10504",
"10506",
"10510",
"10511",
"10514",
"10516",
"10520",
"10522",
"10523",
"10524",
"10528",
"10530",
"10532",
"10533",
"10535",
"10537",
"10538",
"10543",
"10545",
"10546",
"10547",
"10548",
"10549",
"10550",
"10552",
"10553",
"10560",
"10562",
"10566",
"10567",
"10570",
"10573",
"10577",
"10579",
"10580",
"10583",
"10588",
"10591",
"10594",
"10595",
"10596",
"10598",
"10601",
"10603",
"10604",
"10605",
"10606",
"10607",
"10701",
"10703",
"10704",
"10705",
"10706",
"10707",
"10708",
"10709",
"10710",
"10801",
"10803",
"10804",
"10805",
"10901",
"10910",
"10913",
"10914",
"10916",
"10917",
"10918",
"10919",
"10920",
"10921",
"10922",
"10923",
"10924",
"10925",
"10926",
"10927",
"10928",
"10930",
"10931",
"10940",
"10941",
"10949",
"10950",
"10952",
"10954",
"10956",
"10958",
"10960",
"10962",
"10963",
"10964",
"10965",
"10968",
"10969",
"10970",
"10973",
"10974",
"10975",
"10976",
"10977",
"10980",
"10983",
"10984",
"10986",
"10987",
"10989",
"10990",
"10992",
"10993",
"10994",
"10996",
"10998",
"11001",
"11003",
"11004",
"11005",
"11010",
"11020",
"11021",
"11023",
"11024",
"11030",
"11040",
"11042",
"11050",
"11096",
"11101",
"11102",
"11103",
"11104",
"11105",
"11106",
"11109",
"11120",
"11201",
"11202",
"11203",
"11204",
"11205",
"11206",
"11207",
"11208",
"11209",
"11210",
"11211",
"11212",
"11213",
"11214",
"11215",
"11216",
"11217",
"11218",
"11219",
"11220",
"11221",
"11222",
"11223",
"11224",
"11225",
"11226",
"11228",
"11229",
"11230",
"11231",
"11232",
"11233",
"11234",
"11235",
"11236",
"11237",
"11238",
"11239",
"11241",
"11242",
"11243",
"11245",
"11247",
"11249",
"11251",
"11252",
"11256",
"11351",
"11352",
"11354",
"11355",
"11356",
"11357",
"11358",
"11359",
"11360",
"11361",
"11362",
"11363",
"11364",
"11365",
"11366",
"11367",
"11368",
"11369",
"11370",
"11371",
"11372",
"11373",
"11374",
"11375",
"11377",
"11378",
"11379",
"11380",
"11381",
"11385",
"11386",
"11405",
"11411",
"11412",
"11413",
"11414",
"11415",
"11416",
"11417",
"11418",
"11419",
"11420",
"11421",
"11422",
"11423",
"11424",
"11425",
"11426",
"11427",
"11428",
"11429",
"11430",
"11431",
"11432",
"11433",
"11434",
"11435",
"11436",
"11439",
"11451",
"11499",
"11501",
"11507",
"11509",
"11510",
"11514",
"11516",
"11518",
"11520",
"11530",
"11542",
"11545",
"11547",
"11548",
"11550",
"11551",
"11552",
"11553",
"11554",
"11556",
"11557",
"11558",
"11559",
"11560",
"11561",
"11563",
"11565",
"11566",
"11568",
"11569",
"11570",
"11572",
"11575",
"11576",
"11577",
"11579",
"11580",
"11581",
"11590",
"11596",
"11598",
"11690",
"11691",
"11692",
"11693",
"11694",
"11695",
"11697",
"11701",
"11702",
"11703",
"11704",
"11705",
"11706",
"11707",
"11709",
"11710",
"11713",
"11714",
"11715",
"11716",
"11717",
"11718",
"11719",
"11720",
"11721",
"11722",
"11724",
"11725",
"11726",
"11727",
"11729",
"11730",
"11731",
"11732",
"11733",
"11735",
"11738",
"11739",
"11740",
"11741",
"11742",
"11743",
"11746",
"11747",
"11749",
"11751",
"11752",
"11753",
"11754",
"11755",
"11756",
"11757",
"11758",
"11760",
"11762",
"11763",
"11764",
"11765",
"11766",
"11767",
"11768",
"11769",
"11770",
"11771",
"11772",
"11775",
"11776",
"11777",
"11778",
"11779",
"11780",
"11782",
"11783",
"11784",
"11786",
"11787",
"11788",
"11789",
"11790",
"11791",
"11792",
"11793",
"11794",
"11795",
"11796",
"11797",
"11798",
"11801",
"11803",
"11804",
"11901",
"11933",
"11934",
"11940",
"11941",
"11942",
"11949",
"11950",
"11951",
"11953",
"11955",
"11956",
"11959",
"11960",
"11961",
"11967",
"11970",
"11972",
"11973",
"11977",
"11978",
"11980",
"12518",
"12520",
"12550",
"12553",
"12571",
"12575",
"12577",
"12584",
"12586",
"15001",
"15003",
"15004",
"15005",
"15006",
"15007",
"15009",
"15010",
"15012",
"15014",
"15015",
"15017",
"15018",
"15019",
"15020",
"15021",
"15022",
"15024",
"15025",
"15026",
"15027",
"15028",
"15030",
"15031",
"15032",
"15033",
"15034",
"15035",
"15036",
"15037",
"15038",
"15042",
"15043",
"15044",
"15045",
"15046",
"15047",
"15049",
"15050",
"15051",
"15052",
"15053",
"15054",
"15055",
"15056",
"15057",
"15059",
"15060",
"15061",
"15062",
"15063",
"15064",
"15065",
"15066",
"15067",
"15068",
"15069",
"15071",
"15072",
"15074",
"15075",
"15076",
"15077",
"15078",
"15081",
"15082",
"15083",
"15084",
"15085",
"15086",
"15087",
"15088",
"15089",
"15090",
"15091",
"15095",
"15096",
"15101",
"15102",
"15104",
"15106",
"15108",
"15110",
"15112",
"15116",
"15120",
"15122",
"15123",
"15126",
"15127",
"15129",
"15130",
"15131",
"15132",
"15133",
"15134",
"15135",
"15136",
"15137",
"15139",
"15140",
"15142",
"15143",
"15144",
"15145",
"15146",
"15147",
"15148",
"15201",
"15202",
"15203",
"15204",
"15205",
"15206",
"15207",
"15208",
"15209",
"15210",
"15211",
"15212",
"15213",
"15214",
"15215",
"15216",
"15217",
"15218",
"15219",
"15220",
"15221",
"15222",
"15223",
"15224",
"15225",
"15226",
"15227",
"15228",
"15229",
"15230",
"15231",
"15232",
"15233",
"15234",
"15235",
"15236",
"15237",
"15238",
"15239",
"15240",
"15241",
"15242",
"15243",
"15244",
"15250",
"15251",
"15252",
"15253",
"15254",
"15255",
"15257",
"15258",
"15259",
"15260",
"15261",
"15262",
"15263",
"15264",
"15265",
"15266",
"15267",
"15268",
"15270",
"15272",
"15274",
"15275",
"15276",
"15277",
"15278",
"15279",
"15281",
"15282",
"15283",
"15286",
"15290",
"15301",
"15310",
"15311",
"15312",
"15313",
"15314",
"15315",
"15316",
"15317",
"15320",
"15321",
"15322",
"15323",
"15324",
"15325",
"15327",
"15329",
"15330",
"15331",
"15332",
"15333",
"15334",
"15336",
"15337",
"15338",
"15339",
"15340",
"15341",
"15342",
"15344",
"15345",
"15346",
"15347",
"15348",
"15349",
"15350",
"15351",
"15352",
"15353",
"15354",
"15357",
"15358",
"15359",
"15360",
"15361",
"15362",
"15363",
"15364",
"15365",
"15366",
"15367",
"15368",
"15370",
"15376",
"15377",
"15378",
"15379",
"15380",
"15401",
"15410",
"15411",
"15412",
"15413",
"15415",
"15416",
"15417",
"15419",
"15420",
"15421",
"15422",
"15423",
"15424",
"15425",
"15427",
"15428",
"15429",
"15430",
"15431",
"15432",
"15433",
"15434",
"15435",
"15436",
"15437",
"15438",
"15439",
"15440",
"15442",
"15443",
"15444",
"15445",
"15446",
"15447",
"15448",
"15449",
"15450",
"15451",
"15454",
"15455",
"15456",
"15458",
"15459",
"15460",
"15461",
"15462",
"15463",
"15464",
"15465",
"15466",
"15467",
"15468",
"15469",
"15470",
"15472",
"15473",
"15474",
"15475",
"15476",
"15477",
"15478",
"15479",
"15480",
"15482",
"15483",
"15484",
"15485",
"15486",
"15488",
"15489",
"15490",
"15492",
"15501",
"15502",
"15510",
"15520",
"15521",
"15522",
"15530",
"15531",
"15532",
"15533",
"15534",
"15535",
"15536",
"15537",
"15538",
"15539",
"15540",
"15541",
"15542",
"15544",
"15545",
"15546",
"15547",
"15548",
"15549",
"15550",
"15551",
"15552",
"15553",
"15554",
"15555",
"15557",
"15558",
"15559",
"15560",
"15561",
"15562",
"15563",
"15564",
"15565",
"15601",
"15605",
"15606",
"15610",
"15611",
"15612",
"15613",
"15615",
"15616",
"15617",
"15618",
"15619",
"15620",
"15621",
"15622",
"15623",
"15624",
"15625",
"15626",
"15627",
"15628",
"15629",
"15630",
"15631",
"15632",
"15633",
"15634",
"15635",
"15636",
"15637",
"15638",
"15639",
"15640",
"15641",
"15642",
"15644",
"15646",
"15647",
"15650",
"15655",
"15656",
"15658",
"15660",
"15661",
"15662",
"15663",
"15664",
"15665",
"15666",
"15668",
"15670",
"15671",
"15672",
"15673",
"15674",
"15675",
"15676",
"15677",
"15678",
"15679",
"15680",
"15681",
"15682",
"15683",
"15684",
"15685",
"15686",
"15687",
"15688",
"15689",
"15690",
"15691",
"15692",
"15693",
"15695",
"15696",
"15697",
"15698",
"15701",
"15705",
"15710",
"15711",
"15712",
"15713",
"15714",
"15715",
"15716",
"15717",
"15720",
"15721",
"15722",
"15723",
"15724",
"15725",
"15727",
"15728",
"15729",
"15730",
"15731",
"15732",
"15733",
"15734",
"15736",
"15737",
"15738",
"15739",
"15741",
"15742",
"15744",
"15745",
"15746",
"15747",
"15748",
"15750",
"15751",
"15752",
"15753",
"15754",
"15756",
"15757",
"15758",
"15759",
"15760",
"15761",
"15762",
"15763",
"15764",
"15765",
"15767",
"15770",
"15771",
"15772",
"15773",
"15774",
"15775",
"15776",
"15777",
"15778",
"15779",
"15780",
"15781",
"15783",
"15784",
"15801",
"15821",
"15822",
"15823",
"15824",
"15825",
"15827",
"15828",
"15829",
"15831",
"15832",
"15834",
"15840",
"15841",
"15845",
"15846",
"15847",
"15848",
"15849",
"15851",
"15853",
"15856",
"15857",
"15860",
"15861",
"15863",
"15864",
"15865",
"15866",
"15868",
"15870",
"15901",
"15902",
"15904",
"15905",
"15906",
"15907",
"15909",
"15915",
"15920",
"15921",
"15922",
"15923",
"15924",
"15925",
"15926",
"15927",
"15928",
"15929",
"15930",
"15931",
"15934",
"15935",
"15936",
"15937",
"15938",
"15940",
"15942",
"15943",
"15944",
"15945",
"15946",
"15948",
"15949",
"15951",
"15952",
"15953",
"15954",
"15955",
"15956",
"15957",
"15958",
"15959",
"15960",
"15961",
"15962",
"15963",
"16001",
"16002",
"16003",
"16016",
"16017",
"16018",
"16020",
"16021",
"16022",
"16023",
"16024",
"16025",
"16027",
"16028",
"16029",
"16030",
"16033",
"16034",
"16035",
"16036",
"16037",
"16038",
"16039",
"16040",
"16041",
"16045",
"16046",
"16048",
"16049",
"16050",
"16051",
"16052",
"16053",
"16054",
"16055",
"16056",
"16057",
"16058",
"16059",
"16061",
"16063",
"16066",
"16101",
"16102",
"16103",
"16105",
"16107",
"16108",
"16110",
"16111",
"16112",
"16113",
"16114",
"16115",
"16116",
"16117",
"16120",
"16121",
"16123",
"16124",
"16125",
"16127",
"16130",
"16131",
"16132",
"16133",
"16134",
"16136",
"16137",
"16140",
"16141",
"16142",
"16143",
"16145",
"16146",
"16148",
"16150",
"16151",
"16153",
"16154",
"16155",
"16156",
"16157",
"16159",
"16160",
"16161",
"16172",
"16201",
"16210",
"16211",
"16212",
"16213",
"16214",
"16215",
"16216",
"16217",
"16218",
"16220",
"16221",
"16222",
"16223",
"16224",
"16225",
"16226",
"16228",
"16229",
"16230",
"16232",
"16233",
"16234",
"16235",
"16236",
"16238",
"16239",
"16240",
"16242",
"16244",
"16245",
"16246",
"16248",
"16249",
"16250",
"16253",
"16254",
"16255",
"16256",
"16257",
"16258",
"16259",
"16260",
"16261",
"16262",
"16263",
"16301",
"16311",
"16312",
"16313",
"16314",
"16316",
"16317",
"16319",
"16321",
"16322",
"16323",
"16326",
"16327",
"16328",
"16329",
"16331",
"16332",
"16333",
"16334",
"16335",
"16340",
"16341",
"16342",
"16343",
"16344",
"16345",
"16346",
"16347",
"16350",
"16351",
"16352",
"16353",
"16354",
"16360",
"16361",
"16362",
"16364",
"16365",
"16366",
"16367",
"16368",
"16369",
"16370",
"16371",
"16372",
"16373",
"16374",
"16375",
"16388",
"16401",
"16402",
"16403",
"16404",
"16405",
"16406",
"16407",
"16410",
"16411",
"16412",
"16413",
"16415",
"16416",
"16417",
"16420",
"16421",
"16422",
"16423",
"16424",
"16426",
"16427",
"16428",
"16430",
"16432",
"16433",
"16434",
"16435",
"16436",
"16438",
"16440",
"16441",
"16442",
"16443",
"16444",
"16475",
"16501",
"16502",
"16503",
"16504",
"16505",
"16506",
"16507",
"16508",
"16509",
"16510",
"16511",
"16512",
"16514",
"16515",
"16522",
"16530",
"16531",
"16532",
"16533",
"16534",
"16538",
"16541",
"16544",
"16546",
"16550",
"16553",
"16554",
"16558",
"16563",
"16565",
"16601",
"16602",
"16603",
"16611",
"16613",
"16614",
"16616",
"16617",
"16619",
"16620",
"16621",
"16622",
"16623",
"16624",
"16625",
"16627",
"16629",
"16630",
"16631",
"16633",
"16634",
"16635",
"16636",
"16637",
"16638",
"16639",
"16640",
"16641",
"16644",
"16645",
"16646",
"16647",
"16648",
"16650",
"16651",
"16652",
"16654",
"16655",
"16656",
"16657",
"16659",
"16660",
"16661",
"16662",
"16663",
"16664",
"16665",
"16666",
"16667",
"16668",
"16669",
"16670",
"16671",
"16672",
"16673",
"16674",
"16675",
"16677",
"16678",
"16679",
"16680",
"16681",
"16682",
"16683",
"16684",
"16685",
"16686",
"16689",
"16691",
"16692",
"16693",
"16694",
"16695",
"16698",
"16699",
"16701",
"16720",
"16724",
"16725",
"16726",
"16727",
"16728",
"16729",
"16730",
"16731",
"16732",
"16733",
"16734",
"16735",
"16738",
"16740",
"16743",
"16744",
"16745",
"16746",
"16748",
"16749",
"16750",
"16751",
"16801",
"16802",
"16803",
"16804",
"16805",
"16820",
"16821",
"16822",
"16823",
"16825",
"16826",
"16827",
"16828",
"16829",
"16830",
"16832",
"16833",
"16834",
"16835",
"16836",
"16837",
"16838",
"16839",
"16840",
"16841",
"16843",
"16844",
"16845",
"16847",
"16848",
"16849",
"16850",
"16851",
"16852",
"16853",
"16854",
"16855",
"16856",
"16858",
"16859",
"16860",
"16861",
"16863",
"16864",
"16865",
"16866",
"16868",
"16870",
"16871",
"16872",
"16873",
"16874",
"16875",
"16876",
"16877",
"16878",
"16879",
"16881",
"16882",
"16901",
"16910",
"16911",
"16912",
"16914",
"16915",
"16917",
"16918",
"16920",
"16921",
"16922",
"16923",
"16925",
"16926",
"16927",
"16928",
"16929",
"16930",
"16932",
"16933",
"16935",
"16936",
"16937",
"16938",
"16939",
"16940",
"16941",
"16942",
"16943",
"16945",
"16946",
"16947",
"16948",
"16950",
"17001",
"17002",
"17003",
"17004",
"17005",
"17006",
"17007",
"17008",
"17009",
"17010",
"17011",
"17012",
"17013",
"17014",
"17015",
"17016",
"17017",
"17018",
"17019",
"17020",
"17021",
"17022",
"17023",
"17024",
"17025",
"17026",
"17027",
"17028",
"17029",
"17030",
"17031",
"17032",
"17033",
"17034",
"17035",
"17036",
"17037",
"17038",
"17039",
"17040",
"17041",
"17042",
"17043",
"17044",
"17045",
"17046",
"17047",
"17048",
"17049",
"17050",
"17051",
"17052",
"17053",
"17054",
"17055",
"17056",
"17057",
"17058",
"17059",
"17060",
"17061",
"17062",
"17063",
"17064",
"17065",
"17066",
"17067",
"17068",
"17069",
"17070",
"17071",
"17072",
"17073",
"17074",
"17075",
"17076",
"17077",
"17078",
"17080",
"17081",
"17082",
"17083",
"17084",
"17085",
"17086",
"17087",
"17088",
"17089",
"17090",
"17093",
"17094",
"17097",
"17098",
"17099",
"17101",
"17102",
"17103",
"17104",
"17105",
"17106",
"17107",
"17108",
"17109",
"17110",
"17111",
"17112",
"17113",
"17120",
"17121",
"17122",
"17123",
"17124",
"17125",
"17126",
"17127",
"17128",
"17129",
"17130",
"17140",
"17177",
"17201",
"17202",
"17210",
"17211",
"17212",
"17213",
"17214",
"17215",
"17217",
"17219",
"17220",
"17221",
"17222",
"17223",
"17224",
"17225",
"17228",
"17229",
"17231",
"17232",
"17233",
"17235",
"17236",
"17237",
"17238",
"17239",
"17240",
"17241",
"17243",
"17244",
"17246",
"17247",
"17249",
"17250",
"17251",
"17252",
"17253",
"17254",
"17255",
"17256",
"17257",
"17260",
"17261",
"17262",
"17263",
"17264",
"17265",
"17266",
"17267",
"17268",
"17270",
"17271",
"17272",
"17294",
"17301",
"17302",
"17303",
"17304",
"17306",
"17307",
"17309",
"17310",
"17311",
"17312",
"17313",
"17314",
"17315",
"17316",
"17317",
"17318",
"17319",
"17320",
"17321",
"17322",
"17323",
"17324",
"17325",
"17326",
"17327",
"17329",
"17331",
"17332",
"17333",
"17337",
"17339",
"17340",
"17342",
"17343",
"17344",
"17345",
"17346",
"17347",
"17349",
"17350",
"17352",
"17353",
"17354",
"17355",
"17356",
"17358",
"17360",
"17361",
"17362",
"17363",
"17364",
"17365",
"17366",
"17368",
"17370",
"17371",
"17372",
"17375",
"17401",
"17402",
"17403",
"17404",
"17405",
"17406",
"17407",
"17408",
"17415",
"17501",
"17502",
"17503",
"17504",
"17505",
"17506",
"17507",
"17508",
"17509",
"17512",
"17516",
"17517",
"17518",
"17519",
"17520",
"17521",
"17522",
"17527",
"17528",
"17529",
"17532",
"17533",
"17534",
"17535",
"17536",
"17537",
"17538",
"17540",
"17543",
"17545",
"17547",
"17549",
"17550",
"17551",
"17552",
"17554",
"17555",
"17557",
"17560",
"17562",
"17563",
"17564",
"17565",
"17566",
"17567",
"17568",
"17569",
"17570",
"17572",
"17573",
"17575",
"17576",
"17577",
"17578",
"17579",
"17580",
"17581",
"17582",
"17583",
"17584",
"17585",
"17601",
"17602",
"17603",
"17604",
"17605",
"17606",
"17607",
"17608",
"17701",
"17702",
"17703",
"17705",
"17720",
"17721",
"17722",
"17723",
"17724",
"17726",
"17727",
"17728",
"17729",
"17730",
"17731",
"17735",
"17737",
"17738",
"17739",
"17740",
"17742",
"17743",
"17744",
"17745",
"17747",
"17748",
"17749",
"17750",
"17751",
"17752",
"17754",
"17756",
"17758",
"17759",
"17760",
"17762",
"17763",
"17764",
"17765",
"17767",
"17768",
"17769",
"17771",
"17772",
"17773",
"17774",
"17776",
"17777",
"17778",
"17779",
"17801",
"17810",
"17812",
"17813",
"17814",
"17815",
"17820",
"17821",
"17822",
"17823",
"17824",
"17825",
"17827",
"17828",
"17829",
"17830",
"17831",
"17832",
"17833",
"17834",
"17835",
"17836",
"17837",
"17839",
"17840",
"17841",
"17842",
"17843",
"17844",
"17845",
"17846",
"17847",
"17850",
"17851",
"17853",
"17855",
"17856",
"17857",
"17858",
"17859",
"17860",
"17861",
"17862",
"17864",
"17865",
"17866",
"17867",
"17868",
"17870",
"17872",
"17876",
"17877",
"17878",
"17880",
"17881",
"17882",
"17883",
"17884",
"17885",
"17886",
"17887",
"17888",
"17889",
"17901",
"17920",
"17921",
"17922",
"17923",
"17925",
"17927",
"17929",
"17930",
"17931",
"17932",
"17933",
"17934",
"17935",
"17936",
"17938",
"17941",
"17942",
"17943",
"17944",
"17945",
"17946",
"17948",
"17949",
"17951",
"17952",
"17953",
"17954",
"17957",
"17959",
"17960",
"17961",
"17963",
"17964",
"17965",
"17966",
"17967",
"17968",
"17970",
"17972",
"17974",
"17976",
"17978",
"17979",
"17980",
"17981",
"17982",
"17983",
"17985",
"18001",
"18002",
"18003",
"18010",
"18011",
"18012",
"18013",
"18014",
"18015",
"18016",
"18017",
"18018",
"18020",
"18025",
"18030",
"18031",
"18032",
"18034",
"18035",
"18036",
"18037",
"18038",
"18039",
"18040",
"18041",
"18042",
"18043",
"18044",
"18045",
"18046",
"18049",
"18050",
"18051",
"18052",
"18053",
"18054",
"18055",
"18056",
"18058",
"18059",
"18060",
"18062",
"18063",
"18064",
"18065",
"18066",
"18067",
"18068",
"18069",
"18070",
"18071",
"18072",
"18073",
"18074",
"18076",
"18077",
"18078",
"18079",
"18080",
"18081",
"18083",
"18084",
"18085",
"18086",
"18087",
"18088",
"18091",
"18092",
"18098",
"18099",
"18101",
"18102",
"18103",
"18104",
"18105",
"18106",
"18109",
"18175",
"18195",
"18201",
"18202",
"18210",
"18211",
"18212",
"18214",
"18216",
"18218",
"18219",
"18220",
"18221",
"18222",
"18223",
"18224",
"18225",
"18229",
"18230",
"18231",
"18232",
"18234",
"18235",
"18237",
"18239",
"18240",
"18241",
"18242",
"18243",
"18244",
"18245",
"18246",
"18247",
"18248",
"18249",
"18250",
"18251",
"18252",
"18254",
"18255",
"18256",
"18301",
"18302",
"18320",
"18321",
"18322",
"18323",
"18324",
"18325",
"18326",
"18327",
"18328",
"18330",
"18331",
"18332",
"18333",
"18334",
"18335",
"18336",
"18337",
"18340",
"18341",
"18342",
"18343",
"18344",
"18346",
"18347",
"18348",
"18349",
"18350",
"18351",
"18352",
"18353",
"18354",
"18355",
"18356",
"18357",
"18360",
"18370",
"18371",
"18372",
"18373",
"18401",
"18403",
"18405",
"18407",
"18410",
"18411",
"18413",
"18414",
"18415",
"18416",
"18417",
"18419",
"18420",
"18421",
"18424",
"18425",
"18426",
"18427",
"18428",
"18430",
"18431",
"18433",
"18434",
"18435",
"18436",
"18437",
"18438",
"18439",
"18440",
"18441",
"18443",
"18444",
"18445",
"18446",
"18447",
"18448",
"18449",
"18451",
"18452",
"18453",
"18454",
"18455",
"18456",
"18457",
"18458",
"18459",
"18460",
"18461",
"18462",
"18463",
"18464",
"18465",
"18466",
"18469",
"18470",
"18471",
"18472",
"18473",
"18501",
"18502",
"18503",
"18504",
"18505",
"18507",
"18508",
"18509",
"18510",
"18512",
"18514",
"18515",
"18517",
"18518",
"18519",
"18522",
"18540",
"18577",
"18601",
"18602",
"18603",
"18610",
"18611",
"18612",
"18614",
"18615",
"18616",
"18617",
"18618",
"18619",
"18621",
"18622",
"18623",
"18624",
"18625",
"18626",
"18627",
"18628",
"18629",
"18630",
"18631",
"18632",
"18634",
"18635",
"18636",
"18640",
"18641",
"18642",
"18643",
"18644",
"18651",
"18653",
"18654",
"18655",
"18656",
"18657",
"18660",
"18661",
"18690",
"18701",
"18702",
"18703",
"18704",
"18705",
"18706",
"18707",
"18708",
"18709",
"18710",
"18711",
"18761",
"18762",
"18763",
"18764",
"18765",
"18766",
"18767",
"18768",
"18769",
"18773",
"18774",
"18801",
"18810",
"18812",
"18813",
"18814",
"18815",
"18816",
"18817",
"18818",
"18820",
"18821",
"18822",
"18823",
"18824",
"18825",
"18826",
"18827",
"18828",
"18829",
"18830",
"18831",
"18832",
"18833",
"18834",
"18837",
"18839",
"18840",
"18842",
"18843",
"18844",
"18845",
"18846",
"18847",
"18848",
"18850",
"18851",
"18853",
"18854",
"18901",
"18902",
"18910",
"18911",
"18912",
"18913",
"18914",
"18915",
"18916",
"18917",
"18918",
"18920",
"18921",
"18922",
"18923",
"18924",
"18925",
"18926",
"18927",
"18928",
"18929",
"18930",
"18931",
"18932",
"18933",
"18934",
"18935",
"18936",
"18938",
"18940",
"18942",
"18943",
"18944",
"18946",
"18947",
"18949",
"18950",
"18951",
"18953",
"18954",
"18955",
"18956",
"18957",
"18958",
"18960",
"18962",
"18963",
"18964",
"18966",
"18968",
"18969",
"18970",
"18971",
"18972",
"18974",
"18976",
"18977",
"18979",
"18980",
"18981",
"18991",
"19001",
"19002",
"19003",
"19004",
"19006",
"19007",
"19008",
"19009",
"19010",
"19012",
"19013",
"19014",
"19015",
"19016",
"19017",
"19018",
"19019",
"19020",
"19021",
"19022",
"19023",
"19025",
"19026",
"19027",
"19028",
"19029",
"19030",
"19031",
"19032",
"19033",
"19034",
"19035",
"19036",
"19037",
"19038",
"19039",
"19040",
"19041",
"19043",
"19044",
"19046",
"19047",
"19048",
"19049",
"19050",
"19052",
"19053",
"19054",
"19055",
"19056",
"19057",
"19058",
"19059",
"19060",
"19061",
"19063",
"19064",
"19065",
"19066",
"19067",
"19070",
"19072",
"19073",
"19074",
"19075",
"19076",
"19078",
"19079",
"19080",
"19081",
"19082",
"19083",
"19085",
"19086",
"19087",
"19088",
"19089",
"19090",
"19091",
"19093",
"19094",
"19095",
"19096",
"19098",
"19101",
"19102",
"19103",
"19104",
"19105",
"19106",
"19107",
"19108",
"19109",
"19110",
"19111",
"19112",
"19113",
"19114",
"19115",
"19116",
"19118",
"19119",
"19120",
"19121",
"19122",
"19123",
"19124",
"19125",
"19126",
"19127",
"19128",
"19129",
"19130",
"19131",
"19132",
"19133",
"19134",
"19135",
"19136",
"19137",
"19138",
"19139",
"19140",
"19141",
"19142",
"19143",
"19144",
"19145",
"19146",
"19147",
"19148",
"19149",
"19150",
"19151",
"19152",
"19153",
"19154",
"19155",
"19160",
"19161",
"19162",
"19170",
"19171",
"19172",
"19173",
"19175",
"19176",
"19177",
"19178",
"19181",
"19182",
"19183",
"19184",
"19185",
"19187",
"19188",
"19191",
"19192",
"19193",
"19194",
"19196",
"19197",
"19244",
"19255",
"19301",
"19310",
"19311",
"19312",
"19316",
"19317",
"19318",
"19319",
"19320",
"19330",
"19331",
"19333",
"19335",
"19339",
"19341",
"19342",
"19343",
"19344",
"19345",
"19346",
"19347",
"19348",
"19350",
"19351",
"19352",
"19353",
"19354",
"19355",
"19357",
"19358",
"19360",
"19362",
"19363",
"19365",
"19366",
"19367",
"19369",
"19370",
"19371",
"19372",
"19373",
"19374",
"19375",
"19376",
"19380",
"19381",
"19382",
"19383",
"19390",
"19395",
"19397",
"19398",
"19399",
"19401",
"19403",
"19404",
"19405",
"19406",
"19407",
"19408",
"19409",
"19420",
"19421",
"19422",
"19423",
"19424",
"19425",
"19426",
"19428",
"19429",
"19430",
"19432",
"19435",
"19436",
"19437",
"19438",
"19440",
"19441",
"19442",
"19443",
"19444",
"19446",
"19450",
"19451",
"19453",
"19454",
"19455",
"19456",
"19457",
"19460",
"19462",
"19464",
"19465",
"19468",
"19470",
"19472",
"19473",
"19474",
"19475",
"19477",
"19478",
"19480",
"19481",
"19482",
"19483",
"19484",
"19485",
"19486",
"19487",
"19489",
"19490",
"19492",
"19493",
"19494",
"19495",
"19501",
"19503",
"19504",
"19505",
"19506",
"19507",
"19508",
"19510",
"19511",
"19512",
"19516",
"19517",
"19518",
"19519",
"19520",
"19522",
"19523",
"19525",
"19526",
"19529",
"19530",
"19533",
"19534",
"19535",
"19536",
"19538",
"19539",
"19540",
"19541",
"19542",
"19543",
"19544",
"19545",
"19547",
"19548",
"19549",
"19550",
"19551",
"19554",
"19555",
"19557",
"19559",
"19560",
"19562",
"19564",
"19565",
"19567",
"19601",
"19602",
"19603",
"19604",
"19605",
"19606",
"19607",
"19608",
"19609",
"19610",
"19611",
"19612",
"19640",
"20058",
"20207",
"20233",
"20331",
"20335",
"20389",
"20395",
"20409",
"20599",
"20601",
"20602",
"20603",
"20604",
"20606",
"20607",
"20608",
"20609",
"20610",
"20611",
"20612",
"20613",
"20615",
"20616",
"20617",
"20618",
"20619",
"20620",
"20621",
"20622",
"20623",
"20624",
"20625",
"20626",
"20627",
"20628",
"20629",
"20630",
"20632",
"20634",
"20635",
"20636",
"20637",
"20639",
"20640",
"20643",
"20645",
"20646",
"20650",
"20653",
"20656",
"20657",
"20658",
"20659",
"20660",
"20661",
"20662",
"20664",
"20667",
"20670",
"20674",
"20675",
"20676",
"20677",
"20678",
"20680",
"20682",
"20684",
"20685",
"20686",
"20687",
"20688",
"20689",
"20690",
"20692",
"20693",
"20695",
"20701",
"20703",
"20704",
"20705",
"20706",
"20707",
"20708",
"20709",
"20710",
"20711",
"20712",
"20714",
"20715",
"20716",
"20717",
"20718",
"20719",
"20720",
"20721",
"20722",
"20723",
"20724",
"20725",
"20726",
"20731",
"20732",
"20733",
"20735",
"20736",
"20737",
"20738",
"20740",
"20741",
"20742",
"20743",
"20744",
"20745",
"20746",
"20747",
"20748",
"20749",
"20750",
"20751",
"20752",
"20753",
"20754",
"20755",
"20757",
"20758",
"20759",
"20762",
"20763",
"20764",
"20765",
"20768",
"20769",
"20770",
"20771",
"20772",
"20773",
"20774",
"20775",
"20776",
"20777",
"20778",
"20779",
"20781",
"20782",
"20783",
"20784",
"20785",
"20787",
"20788",
"20790",
"20791",
"20792",
"20794",
"20799",
"20812",
"20813",
"20814",
"20815",
"20816",
"20817",
"20818",
"20824",
"20825",
"20827",
"20830",
"20832",
"20833",
"20837",
"20838",
"20839",
"20841",
"20842",
"20847",
"20848",
"20849",
"20850",
"20851",
"20852",
"20853",
"20854",
"20855",
"20857",
"20859",
"20860",
"20861",
"20862",
"20866",
"20868",
"20871",
"20872",
"20874",
"20875",
"20876",
"20877",
"20878",
"20879",
"20880",
"20882",
"20883",
"20884",
"20885",
"20886",
"20889",
"20891",
"20892",
"20894",
"20895",
"20896",
"20898",
"20899",
"20901",
"20902",
"20903",
"20904",
"20905",
"20906",
"20907",
"20908",
"20910",
"20911",
"20912",
"20913",
"20914",
"20915",
"20916",
"20918",
"20993",
"20997",
"21001",
"21005",
"21009",
"21010",
"21012",
"21013",
"21014",
"21015",
"21017",
"21018",
"21020",
"21021",
"21022",
"21023",
"21027",
"21028",
"21029",
"21030",
"21031",
"21032",
"21034",
"21035",
"21036",
"21037",
"21040",
"21041",
"21042",
"21043",
"21044",
"21045",
"21046",
"21047",
"21048",
"21050",
"21051",
"21052",
"21053",
"21054",
"21055",
"21056",
"21057",
"21060",
"21061",
"21062",
"21071",
"21074",
"21075",
"21076",
"21077",
"21078",
"21082",
"21084",
"21085",
"21087",
"21088",
"21090",
"21092",
"21093",
"21094",
"21098",
"21102",
"21104",
"21105",
"21106",
"21107",
"21108",
"21111",
"21113",
"21114",
"21117",
"21120",
"21122",
"21123",
"21128",
"21130",
"21131",
"21132",
"21133",
"21136",
"21139",
"21140",
"21144",
"21146",
"21150",
"21152",
"21153",
"21154",
"21155",
"21156",
"21157",
"21158",
"21160",
"21161",
"21162",
"21163",
"21201",
"21202",
"21203",
"21204",
"21205",
"21206",
"21207",
"21208",
"21209",
"21210",
"21211",
"21212",
"21213",
"21214",
"21215",
"21216",
"21217",
"21218",
"21219",
"21220",
"21221",
"21222",
"21223",
"21224",
"21225",
"21226",
"21227",
"21228",
"21229",
"21230",
"21231",
"21233",
"21234",
"21235",
"21236",
"21237",
"21239",
"21240",
"21241",
"21244",
"21250",
"21251",
"21252",
"21263",
"21264",
"21265",
"21268",
"21270",
"21273",
"21274",
"21275",
"21278",
"21279",
"21280",
"21281",
"21282",
"21283",
"21284",
"21285",
"21286",
"21287",
"21288",
"21289",
"21290",
"21297",
"21298",
"21401",
"21402",
"21403",
"21404",
"21405",
"21409",
"21411",
"21412",
"21501",
"21502",
"21503",
"21504",
"21505",
"21520",
"21521",
"21522",
"21523",
"21524",
"21528",
"21529",
"21530",
"21531",
"21532",
"21536",
"21538",
"21539",
"21540",
"21541",
"21542",
"21543",
"21545",
"21550",
"21555",
"21556",
"21557",
"21560",
"21561",
"21562",
"21601",
"21606",
"21607",
"21609",
"21610",
"21612",
"21613",
"21617",
"21619",
"21620",
"21622",
"21623",
"21624",
"21625",
"21626",
"21627",
"21628",
"21629",
"21631",
"21632",
"21634",
"21635",
"21636",
"21637",
"21638",
"21639",
"21640",
"21641",
"21643",
"21644",
"21645",
"21647",
"21648",
"21649",
"21650",
"21651",
"21652",
"21653",
"21654",
"21655",
"21656",
"21657",
"21658",
"21659",
"21660",
"21661",
"21662",
"21663",
"21664",
"21665",
"21666",
"21667",
"21668",
"21669",
"21670",
"21671",
"21672",
"21673",
"21675",
"21676",
"21677",
"21678",
"21679",
"21681",
"21682",
"21683",
"21684",
"21685",
"21687",
"21690",
"21701",
"21702",
"21703",
"21704",
"21705",
"21709",
"21710",
"21711",
"21713",
"21714",
"21715",
"21716",
"21717",
"21718",
"21719",
"21720",
"21721",
"21722",
"21723",
"21727",
"21733",
"21734",
"21736",
"21737",
"21738",
"21740",
"21741",
"21742",
"21746",
"21747",
"21748",
"21749",
"21750",
"21754",
"21755",
"21756",
"21757",
"21758",
"21759",
"21762",
"21765",
"21766",
"21767",
"21769",
"21770",
"21771",
"21773",
"21774",
"21775",
"21776",
"21777",
"21778",
"21779",
"21780",
"21781",
"21782",
"21783",
"21784",
"21787",
"21788",
"21790",
"21791",
"21792",
"21793",
"21794",
"21795",
"21797",
"21798",
"21801",
"21802",
"21803",
"21804",
"21810",
"21811",
"21813",
"21814",
"21817",
"21821",
"21822",
"21824",
"21826",
"21829",
"21830",
"21835",
"21836",
"21837",
"21838",
"21840",
"21841",
"21842",
"21843",
"21849",
"21850",
"21851",
"21852",
"21853",
"21856",
"21857",
"21861",
"21862",
"21863",
"21864",
"21865",
"21867",
"21869",
"21871",
"21872",
"21874",
"21875",
"21890",
"21901",
"21902",
"21903",
"21904",
"21911",
"21912",
"21913",
"21914",
"21915",
"21916",
"21917",
"21918",
"21919",
"21920",
"21921",
"21922",
"21930",
"29002",
"29006",
"29014",
"29015",
"29016",
"29033",
"29036",
"29037",
"29045",
"29052",
"29053",
"29054",
"29055",
"29058",
"29061",
"29063",
"29065",
"29070",
"29071",
"29072",
"29073",
"29075",
"29105",
"29107",
"29108",
"29112",
"29118",
"29123",
"29126",
"29127",
"29129",
"29130",
"29137",
"29145",
"29146",
"29154",
"29160",
"29161",
"29164",
"29166",
"29169",
"29170",
"29171",
"29172",
"29178",
"29180",
"29201",
"29202",
"29203",
"29204",
"29205",
"29206",
"29207",
"29208",
"29209",
"29210",
"29211",
"29212",
"29215",
"29217",
"29218",
"29219",
"29220",
"29223",
"29229",
"29230",
"29240",
"29250",
"29260",
"29290",
"29301",
"29302",
"29303",
"29305",
"29306",
"29307",
"29316",
"29320",
"29323",
"29324",
"29325",
"29329",
"29330",
"29332",
"29333",
"29334",
"29335",
"29336",
"29340",
"29341",
"29346",
"29349",
"29351",
"29355",
"29360",
"29365",
"29368",
"29369",
"29370",
"29374",
"29376",
"29377",
"29378",
"29379",
"29384",
"29385",
"29388",
"29401",
"29403",
"29404",
"29405",
"29406",
"29407",
"29409",
"29410",
"29412",
"29414",
"29415",
"29416",
"29417",
"29418",
"29419",
"29420",
"29422",
"29423",
"29425",
"29439",
"29445",
"29449",
"29451",
"29455",
"29456",
"29461",
"29464",
"29466",
"29470",
"29483",
"29485",
"29487",
"29492",
"29501",
"29502",
"29504",
"29505",
"29506",
"29512",
"29601",
"29602",
"29603",
"29604",
"29605",
"29606",
"29607",
"29608",
"29609",
"29611",
"29613",
"29614",
"29615",
"29616",
"29617",
"29621",
"29623",
"29624",
"29625",
"29626",
"29627",
"29630",
"29631",
"29633",
"29640",
"29641",
"29642",
"29643",
"29644",
"29645",
"29649",
"29650",
"29651",
"29652",
"29653",
"29657",
"29662",
"29665",
"29669",
"29670",
"29671",
"29672",
"29673",
"29678",
"29679",
"29680",
"29681",
"29682",
"29687",
"29689",
"29690",
"29691",
"29692",
"29693",
"29696",
"29697",
"29702",
"29704",
"29706",
"29707",
"29708",
"29712",
"29714",
"29715",
"29716",
"29720",
"29721",
"29726",
"29729",
"29730",
"29731",
"29732",
"29745",
"29801",
"29802",
"29805",
"29828",
"29834",
"29839",
"29850",
"29909",
"29910",
"29920",
"29926",
"29927",
"29936",
"80001",
"80002",
"80003",
"80004",
"80005",
"80006",
"80007",
"80010",
"80011",
"80012",
"80013",
"80014",
"80015",
"80016",
"80017",
"80018",
"80019",
"80020",
"80021",
"80022",
"80023",
"80026",
"80027",
"80030",
"80031",
"80033",
"80034",
"80035",
"80036",
"80037",
"80038",
"80040",
"80041",
"80042",
"80044",
"80045",
"80046",
"80047",
"80102",
"80104",
"80108",
"80109",
"80110",
"80111",
"80112",
"80113",
"80116",
"80120",
"80121",
"80122",
"80123",
"80124",
"80125",
"80126",
"80127",
"80128",
"80129",
"80130",
"80134",
"80135",
"80137",
"80138",
"80150",
"80151",
"80155",
"80160",
"80161",
"80162",
"80163",
"80165",
"80166",
"80201",
"80202",
"80203",
"80204",
"80205",
"80206",
"80207",
"80208",
"80209",
"80210",
"80211",
"80212",
"80214",
"80215",
"80216",
"80217",
"80218",
"80219",
"80220",
"80221",
"80222",
"80223",
"80224",
"80225",
"80226",
"80227",
"80228",
"80229",
"80230",
"80231",
"80232",
"80233",
"80234",
"80235",
"80236",
"80237",
"80238",
"80239",
"80241",
"80243",
"80244",
"80246",
"80247",
"80248",
"80249",
"80250",
"80251",
"80252",
"80256",
"80257",
"80259",
"80260",
"80261",
"80262",
"80263",
"80264",
"80265",
"80266",
"80271",
"80273",
"80274",
"80279",
"80280",
"80281",
"80290",
"80291",
"80293",
"80294",
"80295",
"80299",
"80301",
"80302",
"80303",
"80304",
"80305",
"80306",
"80307",
"80308",
"80309",
"80310",
"80314",
"80321",
"80322",
"80323",
"80328",
"80329",
"80401",
"80402",
"80403",
"80419",
"80422",
"80433",
"80437",
"80439",
"80452",
"80455",
"80465",
"80466",
"80470",
"80481",
"80501",
"80502",
"80503",
"80504",
"80513",
"80514",
"80516",
"80520",
"80521",
"80522",
"80523",
"80524",
"80525",
"80526",
"80527",
"80528",
"80530",
"80534",
"80537",
"80538",
"80540",
"80542",
"80543",
"80550",
"80553",
"80601",
"80602",
"80603",
"80615",
"80620",
"80621",
"80631",
"80632",
"80633",
"80634",
"80638",
"80639",
"80640",
"80642",
"80645",
"80651",
"85003",
"85004",
"85006",
"85007",
"85008",
"85009",
"85012",
"85013",
"85014",
"85015",
"85016",
"85017",
"85018",
"85019",
"85020",
"85021",
"85022",
"85023",
"85024",
"85027",
"85028",
"85029",
"85031",
"85032",
"85033",
"85034",
"85035",
"85037",
"85040",
"85041",
"85042",
"85043",
"85044",
"85045",
"85048",
"85050",
"85051",
"85053",
"85054",
"85083",
"85085",
"85086",
"85087",
"85118",
"85119",
"85120",
"85122",
"85123",
"85128",
"85132",
"85138",
"85139",
"85140",
"85142",
"85143",
"85172",
"85193",
"85194",
"85201",
"85202",
"85203",
"85204",
"85205",
"85206",
"85207",
"85208",
"85209",
"85210",
"85212",
"85213",
"85215",
"85219",
"85220",
"85224",
"85225",
"85226",
"85233",
"85234",
"85236",
"85240",
"85242",
"85247",
"85248",
"85249",
"85250",
"85251",
"85253",
"85254",
"85255",
"85256",
"85257",
"85258",
"85259",
"85260",
"85262",
"85263",
"85264",
"85266",
"85268",
"85281",
"85282",
"85283",
"85284",
"85286",
"85295",
"85296",
"85297",
"85298",
"85301",
"85302",
"85303",
"85304",
"85305",
"85306",
"85307",
"85308",
"85309",
"85310",
"85323",
"85324",
"85326",
"85329",
"85331",
"85335",
"85338",
"85339",
"85340",
"85342",
"85345",
"85351",
"85353",
"85355",
"85361",
"85363",
"85373",
"85374",
"85375",
"85377",
"85378",
"85379",
"85381",
"85382",
"85383",
"85387",
"85388",
"85392",
"85395",
"85396",
"86301",
"86303",
"86305",
"86314",
"86315",
"86320",
"86322",
"86323",
"86324",
"86325",
"86326",
"86327",
"86329",
"86331",
"86332",
"86333",
"86334",
"86335",
"86338",
"86343",
"88901",
"88905",
"89002",
"89004",
"89005",
"89009",
"89011",
"89012",
"89014",
"89015",
"89016",
"89030",
"89031",
"89032",
"89033",
"89044",
"89052",
"89053",
"89074",
"89077",
"89081",
"89084",
"89085",
"89086",
"89087",
"89101",
"89102",
"89103",
"89104",
"89105",
"89106",
"89107",
"89108",
"89109",
"89110",
"89111",
"89112",
"89113",
"89114",
"89115",
"89116",
"89117",
"89118",
"89119",
"89120",
"89121",
"89122",
"89123",
"89125",
"89126",
"89127",
"89128",
"89129",
"89130",
"89131",
"89132",
"89133",
"89134",
"89135",
"89136",
"89137",
"89138",
"89139",
"89140",
"89141",
"89142",
"89143",
"89144",
"89145",
"89146",
"89147",
"89148",
"89149",
"89150",
"89151",
"89152",
"89153",
"89154",
"89155",
"89156",
"89157",
"89158",
"89159",
"89160",
"89162",
"89163",
"89164",
"89165",
"89166",
"89169",
"89170",
"89173",
"89177",
"89178",
"89179",
"89180",
"89183",
"89185",
"89191",
"89193",
"89195",
"89199",
"89408",
"89431",
"89432",
"89433",
"89434",
"89435",
"89436",
"89439",
"89441",
"89451",
"89501",
"89502",
"89503",
"89504",
"89506",
"89507",
"89508",
"89509",
"89511",
"89512",
"89513",
"89519",
"89521",
"89523",
"89533",
"89595",
"89704",
"90001",
"90002",
"90003",
"90004",
"90005",
"90006",
"90007",
"90008",
"90009",
"90010",
"90011",
"90012",
"90013",
"90014",
"90015",
"90016",
"90017",
"90018",
"90019",
"90020",
"90021",
"90022",
"90023",
"90024",
"90025",
"90026",
"90027",
"90028",
"90029",
"90030",
"90031",
"90032",
"90033",
"90034",
"90035",
"90036",
"90037",
"90038",
"90039",
"90040",
"90041",
"90042",
"90043",
"90044",
"90045",
"90046",
"90047",
"90048",
"90049",
"90050",
"90051",
"90053",
"90054",
"90055",
"90056",
"90057",
"90058",
"90059",
"90060",
"90061",
"90062",
"90063",
"90064",
"90065",
"90066",
"90067",
"90068",
"90069",
"90070",
"90071",
"90073",
"90077",
"90079",
"90089",
"90094",
"90095",
"90201",
"90202",
"90209",
"90210",
"90211",
"90212",
"90220",
"90221",
"90222",
"90230",
"90231",
"90232",
"90233",
"90240",
"90241",
"90242",
"90245",
"90247",
"90248",
"90249",
"90250",
"90251",
"90254",
"90255",
"90260",
"90261",
"90262",
"90263",
"90264",
"90265",
"90266",
"90267",
"90270",
"90272",
"90274",
"90275",
"90277",
"90278",
"90280",
"90290",
"90291",
"90292",
"90293",
"90294",
"90295",
"90296",
"90301",
"90302",
"90303",
"90304",
"90305",
"90401",
"90402",
"90403",
"90404",
"90405",
"90501",
"90502",
"90503",
"90504",
"90505",
"90506",
"90601",
"90602",
"90603",
"90604",
"90605",
"90606",
"90608",
"90620",
"90621",
"90622",
"90623",
"90624",
"90630",
"90631",
"90632",
"90633",
"90638",
"90639",
"90640",
"90650",
"90660",
"90670",
"90680",
"90701",
"90703",
"90706",
"90710",
"90712",
"90713",
"90715",
"90716",
"90717",
"90720",
"90721",
"90723",
"90731",
"90732",
"90740",
"90742",
"90743",
"90744",
"90745",
"90746",
"90747",
"90755",
"90802",
"90803",
"90804",
"90805",
"90806",
"90807",
"90808",
"90810",
"90813",
"90814",
"90815",
"90822",
"90831",
"90840",
"91001",
"91006",
"91007",
"91008",
"91010",
"91011",
"91016",
"91020",
"91024",
"91030",
"91040",
"91042",
"91101",
"91102",
"91103",
"91104",
"91105",
"91106",
"91107",
"91108",
"91109",
"91110",
"91114",
"91115",
"91116",
"91117",
"91118",
"91121",
"91123",
"91124",
"91125",
"91126",
"91129",
"91182",
"91184",
"91185",
"91188",
"91189",
"91199",
"91201",
"91202",
"91203",
"91204",
"91205",
"91206",
"91207",
"91208",
"91209",
"91210",
"91214",
"91221",
"91222",
"91225",
"91226",
"91301",
"91302",
"91303",
"91304",
"91306",
"91307",
"91311",
"91316",
"91320",
"91321",
"91324",
"91325",
"91326",
"91330",
"91331",
"91335",
"91340",
"91342",
"91343",
"91344",
"91345",
"91350",
"91351",
"91352",
"91354",
"91355",
"91356",
"91360",
"91361",
"91362",
"91364",
"91367",
"91371",
"91377",
"91380",
"91381",
"91382",
"91384",
"91387",
"91390",
"91401",
"91402",
"91403",
"91405",
"91406",
"91411",
"91423",
"91436",
"91501",
"91502",
"91504",
"91505",
"91506",
"91521",
"91522",
"91601",
"91602",
"91604",
"91605",
"91606",
"91607",
"91608",
"91701",
"91702",
"91706",
"91708",
"91709",
"91710",
"91711",
"91715",
"91719",
"91722",
"91723",
"91724",
"91729",
"91730",
"91731",
"91732",
"91733",
"91737",
"91739",
"91740",
"91741",
"91743",
"91744",
"91745",
"91746",
"91748",
"91750",
"91752",
"91754",
"91755",
"91758",
"91761",
"91762",
"91763",
"91764",
"91765",
"91766",
"91767",
"91768",
"91769",
"91770",
"91773",
"91775",
"91776",
"91780",
"91784",
"91785",
"91786",
"91789",
"91790",
"91791",
"91792",
"91801",
"91803",
"91901",
"91902",
"91910",
"91911",
"91913",
"91914",
"91915",
"91916",
"91932",
"91935",
"91941",
"91942",
"91945",
"91950",
"91977",
"91978",
"92003",
"92007",
"92008",
"92009",
"92010",
"92011",
"92014",
"92019",
"92020",
"92021",
"92024",
"92025",
"92026",
"92027",
"92028",
"92029",
"92037",
"92040",
"92054",
"92055",
"92056",
"92057",
"92058",
"92059",
"92060",
"92061",
"92064",
"92065",
"92067",
"92069",
"92070",
"92071",
"92075",
"92078",
"92081",
"92082",
"92083",
"92084",
"92091",
"92092",
"92093",
"92101",
"92102",
"92103",
"92104",
"92105",
"92106",
"92107",
"92108",
"92109",
"92110",
"92111",
"92113",
"92114",
"92115",
"92116",
"92117",
"92118",
"92119",
"92120",
"92121",
"92122",
"92123",
"92124",
"92126",
"92127",
"92128",
"92129",
"92130",
"92131",
"92136",
"92137",
"92139",
"92140",
"92145",
"92147",
"92152",
"92154",
"92155",
"92161",
"92173",
"92179",
"92201",
"92203",
"92210",
"92211",
"92220",
"92223",
"92230",
"92234",
"92236",
"92239",
"92240",
"92241",
"92253",
"92254",
"92256",
"92258",
"92260",
"92262",
"92264",
"92270",
"92274",
"92276",
"92277",
"92282",
"92284",
"92301",
"92305",
"92307",
"92308",
"92311",
"92313",
"92314",
"92315",
"92316",
"92317",
"92318",
"92320",
"92321",
"92322",
"92324",
"92325",
"92326",
"92329",
"92331",
"92333",
"92334",
"92335",
"92336",
"92337",
"92339",
"92340",
"92341",
"92342",
"92344",
"92345",
"92346",
"92350",
"92352",
"92354",
"92356",
"92357",
"92358",
"92359",
"92368",
"92369",
"92371",
"92372",
"92373",
"92374",
"92375",
"92376",
"92377",
"92378",
"92382",
"92385",
"92391",
"92392",
"92393",
"92394",
"92395",
"92397",
"92399",
"92401",
"92402",
"92403",
"92404",
"92405",
"92406",
"92407",
"92408",
"92410",
"92411",
"92412",
"92413",
"92414",
"92415",
"92418",
"92423",
"92424",
"92427",
"92501",
"92502",
"92503",
"92504",
"92505",
"92506",
"92507",
"92508",
"92509",
"92513",
"92514",
"92515",
"92516",
"92517",
"92518",
"92519",
"92521",
"92522",
"92530",
"92532",
"92536",
"92543",
"92544",
"92545",
"92548",
"92549",
"92551",
"92553",
"92555",
"92557",
"92562",
"92563",
"92567",
"92570",
"92571",
"92581",
"92582",
"92583",
"92584",
"92585",
"92586",
"92587",
"92590",
"92591",
"92592",
"92595",
"92596",
"92602",
"92603",
"92604",
"92605",
"92606",
"92607",
"92609",
"92610",
"92612",
"92614",
"92615",
"92616",
"92617",
"92618",
"92619",
"92620",
"92623",
"92624",
"92625",
"92626",
"92627",
"92628",
"92629",
"92630",
"92637",
"92646",
"92647",
"92648",
"92649",
"92650",
"92651",
"92652",
"92653",
"92654",
"92655",
"92656",
"92657",
"92658",
"92659",
"92660",
"92661",
"92662",
"92663",
"92672",
"92673",
"92674",
"92675",
"92676",
"92677",
"92678",
"92679",
"92683",
"92684",
"92685",
"92688",
"92690",
"92691",
"92692",
"92693",
"92694",
"92697",
"92698",
"92701",
"92702",
"92703",
"92704",
"92705",
"92706",
"92707",
"92708",
"92709",
"92710",
"92711",
"92712",
"92725",
"92728",
"92735",
"92780",
"92781",
"92782",
"92799",
"92801",
"92802",
"92803",
"92804",
"92805",
"92806",
"92807",
"92808",
"92809",
"92811",
"92812",
"92814",
"92815",
"92816",
"92817",
"92821",
"92822",
"92823",
"92825",
"92831",
"92832",
"92833",
"92834",
"92835",
"92836",
"92837",
"92838",
"92840",
"92841",
"92842",
"92843",
"92844",
"92845",
"92846",
"92850",
"92856",
"92857",
"92859",
"92860",
"92861",
"92862",
"92863",
"92864",
"92865",
"92866",
"92867",
"92868",
"92869",
"92870",
"92871",
"92877",
"92878",
"92879",
"92880",
"92881",
"92882",
"92883",
"92885",
"92886",
"92887",
"92899",
"93001",
"93003",
"93004",
"93009",
"93010",
"93012",
"93013",
"93015",
"93021",
"93022",
"93023",
"93030",
"93033",
"93035",
"93036",
"93040",
"93041",
"93042",
"93043",
"93060",
"93063",
"93064",
"93065",
"93066",
"93067",
"93101",
"93103",
"93105",
"93106",
"93108",
"93109",
"93110",
"93111",
"93117",
"93199",
"93201",
"93202",
"93203",
"93204",
"93205",
"93206",
"93210",
"93212",
"93215",
"93218",
"93219",
"93221",
"93223",
"93224",
"93230",
"93232",
"93234",
"93235",
"93239",
"93240",
"93241",
"93242",
"93243",
"93244",
"93245",
"93246",
"93247",
"93250",
"93251",
"93256",
"93257",
"93258",
"93263",
"93266",
"93267",
"93268",
"93270",
"93274",
"93275",
"93276",
"93277",
"93278",
"93279",
"93280",
"93283",
"93286",
"93287",
"93290",
"93291",
"93292",
"93301",
"93304",
"93305",
"93306",
"93307",
"93308",
"93309",
"93311",
"93312",
"93313",
"93314",
"93380",
"93401",
"93402",
"93403",
"93405",
"93406",
"93407",
"93409",
"93410",
"93412",
"93420",
"93421",
"93422",
"93423",
"93424",
"93426",
"93427",
"93428",
"93430",
"93432",
"93433",
"93434",
"93435",
"93436",
"93437",
"93438",
"93440",
"93441",
"93442",
"93443",
"93444",
"93445",
"93446",
"93447",
"93448",
"93449",
"93451",
"93453",
"93454",
"93455",
"93456",
"93457",
"93458",
"93460",
"93461",
"93463",
"93464",
"93465",
"93475",
"93483",
"93501",
"93505",
"93510",
"93523",
"93524",
"93531",
"93532",
"93534",
"93535",
"93536",
"93539",
"93543",
"93544",
"93550",
"93551",
"93552",
"93553",
"93560",
"93561",
"93584",
"93586",
"93590",
"93591",
"93599",
"93608",
"93609",
"93610",
"93611",
"93612",
"93613",
"93614",
"93615",
"93616",
"93618",
"93619",
"93620",
"93622",
"93624",
"93625",
"93626",
"93627",
"93630",
"93631",
"93635",
"93636",
"93637",
"93638",
"93639",
"93640",
"93646",
"93647",
"93648",
"93650",
"93651",
"93652",
"93653",
"93654",
"93656",
"93657",
"93660",
"93662",
"93668",
"93701",
"93702",
"93703",
"93704",
"93705",
"93706",
"93707",
"93708",
"93709",
"93710",
"93711",
"93712",
"93714",
"93715",
"93716",
"93717",
"93718",
"93720",
"93721",
"93722",
"93723",
"93725",
"93726",
"93727",
"93728",
"93730",
"93737",
"93740",
"93741",
"93744",
"93745",
"93901",
"93905",
"93906",
"93907",
"93908",
"93923",
"93924",
"93933",
"93940",
"93950",
"93953",
"93955",
"93962",
"94002",
"94005",
"94010",
"94011",
"94014",
"94015",
"94016",
"94017",
"94018",
"94019",
"94020",
"94022",
"94023",
"94024",
"94025",
"94026",
"94027",
"94028",
"94030",
"94037",
"94038",
"94039",
"94040",
"94041",
"94042",
"94043",
"94044",
"94061",
"94062",
"94063",
"94064",
"94065",
"94066",
"94070",
"94080",
"94083",
"94085",
"94086",
"94087",
"94088",
"94089",
"94102",
"94103",
"94104",
"94105",
"94107",
"94108",
"94109",
"94110",
"94111",
"94112",
"94114",
"94115",
"94116",
"94117",
"94118",
"94119",
"94121",
"94122",
"94123",
"94124",
"94127",
"94129",
"94130",
"94131",
"94132",
"94133",
"94134",
"94140",
"94142",
"94143",
"94146",
"94147",
"94158",
"94159",
"94164",
"94188",
"94203",
"94204",
"94205",
"94206",
"94207",
"94208",
"94209",
"94211",
"94229",
"94230",
"94232",
"94234",
"94235",
"94236",
"94237",
"94239",
"94240",
"94244",
"94245",
"94246",
"94247",
"94248",
"94249",
"94250",
"94252",
"94254",
"94256",
"94257",
"94258",
"94259",
"94261",
"94262",
"94263",
"94267",
"94268",
"94269",
"94271",
"94273",
"94274",
"94277",
"94278",
"94279",
"94280",
"94282",
"94283",
"94284",
"94285",
"94286",
"94287",
"94288",
"94289",
"94290",
"94291",
"94293",
"94294",
"94295",
"94296",
"94297",
"94298",
"94299",
"94301",
"94302",
"94303",
"94304",
"94305",
"94306",
"94401",
"94402",
"94403",
"94404",
"94497",
"94501",
"94502",
"94503",
"94505",
"94506",
"94507",
"94508",
"94509",
"94510",
"94513",
"94514",
"94515",
"94516",
"94517",
"94518",
"94519",
"94520",
"94521",
"94522",
"94523",
"94524",
"94525",
"94526",
"94527",
"94528",
"94530",
"94531",
"94533",
"94534",
"94535",
"94536",
"94537",
"94538",
"94539",
"94540",
"94541",
"94542",
"94544",
"94545",
"94546",
"94547",
"94548",
"94549",
"94550",
"94551",
"94552",
"94553",
"94555",
"94556",
"94558",
"94559",
"94560",
"94561",
"94563",
"94564",
"94565",
"94566",
"94567",
"94568",
"94569",
"94570",
"94571",
"94572",
"94573",
"94574",
"94575",
"94576",
"94577",
"94578",
"94579",
"94580",
"94581",
"94582",
"94583",
"94585",
"94586",
"94587",
"94588",
"94589",
"94590",
"94591",
"94592",
"94595",
"94596",
"94597",
"94598",
"94599",
"94601",
"94602",
"94603",
"94604",
"94605",
"94606",
"94607",
"94608",
"94609",
"94610",
"94611",
"94612",
"94613",
"94614",
"94615",
"94617",
"94618",
"94619",
"94620",
"94621",
"94622",
"94623",
"94624",
"94649",
"94660",
"94661",
"94701",
"94702",
"94703",
"94704",
"94705",
"94706",
"94707",
"94708",
"94709",
"94710",
"94712",
"94720",
"94801",
"94802",
"94803",
"94804",
"94805",
"94806",
"94807",
"94808",
"94820",
"94850",
"94901",
"94903",
"94904",
"94912",
"94913",
"94914",
"94915",
"94920",
"94922",
"94924",
"94925",
"94926",
"94927",
"94928",
"94930",
"94931",
"94933",
"94937",
"94938",
"94939",
"94940",
"94941",
"94942",
"94945",
"94946",
"94947",
"94948",
"94949",
"94950",
"94951",
"94952",
"94953",
"94954",
"94955",
"94956",
"94957",
"94960",
"94963",
"94964",
"94965",
"94966",
"94970",
"94971",
"94972",
"94973",
"94974",
"94975",
"94976",
"94977",
"94978",
"94979",
"94998",
"94999",
"95001",
"95002",
"95003",
"95004",
"95005",
"95006",
"95007",
"95008",
"95009",
"95010",
"95011",
"95012",
"95014",
"95018",
"95019",
"95020",
"95021",
"95023",
"95030",
"95032",
"95033",
"95035",
"95036",
"95037",
"95038",
"95039",
"95041",
"95045",
"95046",
"95050",
"95051",
"95052",
"95053",
"95054",
"95055",
"95056",
"95060",
"95061",
"95062",
"95063",
"95064",
"95065",
"95066",
"95067",
"95070",
"95071",
"95073",
"95076",
"95101",
"95103",
"95106",
"95108",
"95109",
"95110",
"95111",
"95112",
"95113",
"95115",
"95116",
"95117",
"95118",
"95119",
"95120",
"95121",
"95122",
"95123",
"95124",
"95125",
"95126",
"95127",
"95128",
"95129",
"95130",
"95131",
"95132",
"95133",
"95134",
"95135",
"95136",
"95138",
"95139",
"95140",
"95141",
"95148",
"95150",
"95151",
"95152",
"95153",
"95154",
"95155",
"95156",
"95157",
"95158",
"95159",
"95160",
"95161",
"95164",
"95170",
"95172",
"95173",
"95190",
"95191",
"95192",
"95193",
"95194",
"95196",
"95201",
"95202",
"95203",
"95204",
"95205",
"95206",
"95207",
"95208",
"95209",
"95210",
"95211",
"95212",
"95213",
"95215",
"95219",
"95220",
"95222",
"95226",
"95227",
"95228",
"95229",
"95230",
"95231",
"95234",
"95236",
"95237",
"95240",
"95241",
"95242",
"95249",
"95252",
"95253",
"95254",
"95258",
"95267",
"95269",
"95296",
"95297",
"95301",
"95303",
"95304",
"95305",
"95306",
"95307",
"95309",
"95313",
"95315",
"95316",
"95317",
"95320",
"95321",
"95322",
"95323",
"95324",
"95326",
"95327",
"95329",
"95330",
"95333",
"95334",
"95336",
"95337",
"95340",
"95341",
"95343",
"95344",
"95348",
"95350",
"95351",
"95354",
"95355",
"95356",
"95357",
"95358",
"95360",
"95361",
"95363",
"95366",
"95367",
"95368",
"95369",
"95372",
"95374",
"95376",
"95377",
"95378",
"95380",
"95385",
"95386",
"95387",
"95388",
"95391",
"95401",
"95402",
"95403",
"95404",
"95405",
"95406",
"95407",
"95409",
"95416",
"95431",
"95433",
"95439",
"95442",
"95444",
"95448",
"95452",
"95472",
"95473",
"95476",
"95487",
"95492",
"95601",
"95602",
"95603",
"95604",
"95605",
"95606",
"95607",
"95608",
"95609",
"95610",
"95611",
"95612",
"95614",
"95615",
"95616",
"95617",
"95618",
"95619",
"95620",
"95621",
"95623",
"95624",
"95625",
"95626",
"95627",
"95628",
"95630",
"95631",
"95632",
"95633",
"95635",
"95637",
"95638",
"95639",
"95640",
"95641",
"95642",
"95645",
"95648",
"95650",
"95651",
"95652",
"95653",
"95655",
"95658",
"95659",
"95660",
"95661",
"95662",
"95663",
"95664",
"95665",
"95667",
"95668",
"95669",
"95670",
"95671",
"95672",
"95673",
"95674",
"95675",
"95676",
"95677",
"95678",
"95680",
"95681",
"95682",
"95683",
"95685",
"95686",
"95687",
"95688",
"95690",
"95691",
"95692",
"95693",
"95694",
"95695",
"95696",
"95697",
"95698",
"95699",
"95703",
"95713",
"95714",
"95722",
"95741",
"95742",
"95746",
"95747",
"95757",
"95758",
"95759",
"95762",
"95763",
"95765",
"95776",
"95798",
"95799",
"95811",
"95812",
"95813",
"95814",
"95815",
"95816",
"95817",
"95818",
"95819",
"95820",
"95821",
"95822",
"95823",
"95824",
"95825",
"95826",
"95827",
"95828",
"95829",
"95830",
"95831",
"95832",
"95833",
"95834",
"95835",
"95836",
"95837",
"95838",
"95840",
"95841",
"95842",
"95843",
"95851",
"95852",
"95853",
"95860",
"95864",
"95865",
"95866",
"95887",
"95894",
"95899",
"95901",
"95903",
"95912",
"95913",
"95914",
"95917",
"95918",
"95919",
"95920",
"95926",
"95928",
"95932",
"95937",
"95938",
"95942",
"95943",
"95945",
"95946",
"95948",
"95949",
"95950",
"95951",
"95953",
"95954",
"95955",
"95957",
"95958",
"95961",
"95962",
"95963",
"95965",
"95966",
"95968",
"95969",
"95970",
"95972",
"95973",
"95974",
"95975",
"95977",
"95978",
"95982",
"95988",
"95991",
"95992",
"95993",
"96021",
"96029",
"96035",
"96055",
"96074",
"96092",
"96701",
"96704",
"96706",
"96707",
"96708",
"96710",
"96712",
"96713",
"96717",
"96719",
"96720",
"96725",
"96727",
"96728",
"96730",
"96731",
"96732",
"96734",
"96737",
"96738",
"96740",
"96743",
"96744",
"96745",
"96748",
"96749",
"96750",
"96753",
"96755",
"96760",
"96761",
"96762",
"96764",
"96767",
"96768",
"96771",
"96772",
"96773",
"96774",
"96776",
"96777",
"96778",
"96779",
"96780",
"96781",
"96782",
"96783",
"96785",
"96786",
"96789",
"96790",
"96791",
"96792",
"96793",
"96795",
"96797",
"96813",
"96814",
"96815",
"96816",
"96817",
"96818",
"96819",
"96821",
"96822",
"96825",
"96826",
"97002",
"97004",
"97005",
"97006",
"97007",
"97008",
"97009",
"97010",
"97013",
"97015",
"97019",
"97022",
"97023",
"97024",
"97026",
"97027",
"97030",
"97032",
"97034",
"97035",
"97038",
"97042",
"97045",
"97053",
"97055",
"97056",
"97060",
"97062",
"97068",
"97070",
"97071",
"97075",
"97076",
"97077",
"97080",
"97086",
"97089",
"97101",
"97106",
"97109",
"97111",
"97113",
"97114",
"97115",
"97116",
"97117",
"97119",
"97123",
"97124",
"97125",
"97128",
"97132",
"97133",
"97137",
"97140",
"97144",
"97148",
"97201",
"97202",
"97203",
"97204",
"97205",
"97206",
"97209",
"97210",
"97211",
"97212",
"97213",
"97214",
"97215",
"97216",
"97217",
"97218",
"97219",
"97220",
"97221",
"97222",
"97223",
"97224",
"97225",
"97227",
"97229",
"97230",
"97231",
"97232",
"97233",
"97236",
"97239",
"97258",
"97266",
"97267",
"97280",
"97281",
"97291",
"97298",
"97301",
"97302",
"97303",
"97304",
"97305",
"97306",
"97317",
"97325",
"97351",
"97352",
"97362",
"97371",
"97375",
"97381",
"97392",
"97392"
];
;
;
/*!
 * accounting.js v0.4.1, copyright 2014 Open Exchange Rates, MIT license, http://openexchangerates.github.io/accounting.js
 */
(function(p,z){function q(a){return!!(""===a||a&&a.charCodeAt&&a.substr)}function m(a){return u?u(a):"[object Array]"===v.call(a)}function r(a){return"[object Object]"===v.call(a)}function s(a,b){var d,a=a||{},b=b||{};for(d in b)b.hasOwnProperty(d)&&null==a[d]&&(a[d]=b[d]);return a}function j(a,b,d){var c=[],e,h;if(!a)return c;if(w&&a.map===w)return a.map(b,d);for(e=0,h=a.length;e<h;e++)c[e]=b.call(d,a[e],e,a);return c}function n(a,b){a=Math.round(Math.abs(a));return isNaN(a)?b:a}function x(a){var b=c.settings.currency.format;"function"===typeof a&&(a=a());return q(a)&&a.match("%v")?{pos:a,neg:a.replace("-","").replace("%v","-%v"),zero:a}:!a||!a.pos||!a.pos.match("%v")?!q(b)?b:c.settings.currency.format={pos:b,neg:b.replace("%v","-%v"),zero:b}:a}var c={version:"0.4.1",settings:{currency:{symbol:"$",format:"%s%v",decimal:".",thousand:",",precision:2,grouping:3},number:{precision:0,grouping:3,thousand:",",decimal:"."}}},w=Array.prototype.map,u=Array.isArray,v=Object.prototype.toString,o=c.unformat=c.parse=function(a,b){if(m(a))return j(a,function(a){return o(a,b)});a=a||0;if("number"===typeof a)return a;var b=b||".",c=RegExp("[^0-9-"+b+"]",["g"]),c=parseFloat((""+a).replace(/\((.*)\)/,"-$1").replace(c,"").replace(b,"."));return!isNaN(c)?c:0},y=c.toFixed=function(a,b){var b=n(b,c.settings.number.precision),d=Math.pow(10,b);return(Math.round(c.unformat(a)*d)/d).toFixed(b)},t=c.formatNumber=c.format=function(a,b,d,i){if(m(a))return j(a,function(a){return t(a,b,d,i)});var a=o(a),e=s(r(b)?b:{precision:b,thousand:d,decimal:i},c.settings.number),h=n(e.precision),f=0>a?"-":"",g=parseInt(y(Math.abs(a||0),h),10)+"",l=3<g.length?g.length%3:0;return f+(l?g.substr(0,l)+e.thousand:"")+g.substr(l).replace(/(\d{3})(?=\d)/g,"$1"+e.thousand)+(h?e.decimal+y(Math.abs(a),h).split(".")[1]:"")},A=c.formatMoney=function(a,b,d,i,e,h){if(m(a))return j(a,function(a){return A(a,b,d,i,e,h)});var a=o(a),f=s(r(b)?b:{symbol:b,precision:d,thousand:i,decimal:e,format:h},c.settings.currency),g=x(f.format);return(0<a?g.pos:0>a?g.neg:g.zero).replace("%s",f.symbol).replace("%v",t(Math.abs(a),n(f.precision),f.thousand,f.decimal))};c.formatColumn=function(a,b,d,i,e,h){if(!a)return[];var f=s(r(b)?b:{symbol:b,precision:d,thousand:i,decimal:e,format:h},c.settings.currency),g=x(f.format),l=g.pos.indexOf("%s")<g.pos.indexOf("%v")?!0:!1,k=0,a=j(a,function(a){if(m(a))return c.formatColumn(a,f);a=o(a);a=(0<a?g.pos:0>a?g.neg:g.zero).replace("%s",f.symbol).replace("%v",t(Math.abs(a),n(f.precision),f.thousand,f.decimal));if(a.length>k)k=a.length;return a});return j(a,function(a){return q(a)&&a.length<k?l?a.replace(f.symbol,f.symbol+Array(k-a.length+1).join(" ")):Array(k-a.length+1).join(" ")+a:a})};if("undefined"!==typeof exports){if("undefined"!==typeof module&&module.exports)exports=module.exports=c;exports.accounting=c}else"function"===typeof define&&define.amd?define([],function(){return c}):(c.noConflict=function(a){return function(){p.accounting=a;c.noConflict=z;return c}}(p.accounting),p.accounting=c)})(this);
;
(function(e,t){"use strict";var n=e.console||t,r=e.document,i=e.navigator,s=!1,o=e.setTimeout,u=e.clearTimeout,a=e.setInterval,f=e.clearInterval,l=e.JSON,c=e.alert,h=e.History=e.History||{},p=e.history;try{s=e.sessionStorage,s.setItem("TEST","1"),s.removeItem("TEST")}catch(d){s=!1}l.stringify=l.stringify||l.encode,l.parse=l.parse||l.decode;if(typeof h.init!="undefined")throw new Error("History.js Core has already been loaded...");h.init=function(e){return typeof h.Adapter=="undefined"?!1:(typeof h.initCore!="undefined"&&h.initCore(),typeof h.initHtml4!="undefined"&&h.initHtml4(),!0)},h.initCore=function(d){if(typeof h.initCore.initialized!="undefined")return!1;h.initCore.initialized=!0,h.options=h.options||{},h.options.hashChangeInterval=h.options.hashChangeInterval||100,h.options.safariPollInterval=h.options.safariPollInterval||500,h.options.doubleCheckInterval=h.options.doubleCheckInterval||500,h.options.disableSuid=h.options.disableSuid||!1,h.options.storeInterval=h.options.storeInterval||1e3,h.options.busyDelay=h.options.busyDelay||250,h.options.debug=h.options.debug||!1,h.options.initialTitle=h.options.initialTitle||r.title,h.options.html4Mode=h.options.html4Mode||!1,h.options.delayInit=h.options.delayInit||!1,h.intervalList=[],h.clearAllIntervals=function(){var e,t=h.intervalList;if(typeof t!="undefined"&&t!==null){for(e=0;e<t.length;e++)f(t[e]);h.intervalList=null}},h.debug=function(){(h.options.debug||!1)&&h.log.apply(h,arguments)},h.log=function(){var e=typeof n!="undefined"&&typeof n.log!="undefined"&&typeof n.log.apply!="undefined",t=r.getElementById("log"),i,s,o,u,a;e?(u=Array.prototype.slice.call(arguments),i=u.shift(),typeof n.debug!="undefined"?n.debug.apply(n,[i,u]):n.log.apply(n,[i,u])):i="\n"+arguments[0]+"\n";for(s=1,o=arguments.length;s<o;++s){a=arguments[s];if(typeof a=="object"&&typeof l!="undefined")try{a=l.stringify(a)}catch(f){}i+="\n"+a+"\n"}return t?(t.value+=i+"\n-----\n",t.scrollTop=t.scrollHeight-t.clientHeight):e||c(i),!0},h.getInternetExplorerMajorVersion=function(){var e=h.getInternetExplorerMajorVersion.cached=typeof h.getInternetExplorerMajorVersion.cached!="undefined"?h.getInternetExplorerMajorVersion.cached:function(){var e=3,t=r.createElement("div"),n=t.getElementsByTagName("i");while((t.innerHTML="<!--[if gt IE "+ ++e+"]><i></i><![endif]-->")&&n[0]);return e>4?e:!1}();return e},h.isInternetExplorer=function(){var e=h.isInternetExplorer.cached=typeof h.isInternetExplorer.cached!="undefined"?h.isInternetExplorer.cached:Boolean(h.getInternetExplorerMajorVersion());return e},h.options.html4Mode?h.emulated={pushState:!0,hashChange:!0}:h.emulated={pushState:!Boolean(e.history&&e.history.pushState&&e.history.replaceState&&!/ Mobile\/([1-7][a-z]|(8([abcde]|f(1[0-8]))))/i.test(i.userAgent)&&!/AppleWebKit\/5([0-2]|3[0-2])/i.test(i.userAgent)),hashChange:Boolean(!("onhashchange"in e||"onhashchange"in r)||h.isInternetExplorer()&&h.getInternetExplorerMajorVersion()<8)},h.enabled=!h.emulated.pushState,h.bugs={setHash:Boolean(!h.emulated.pushState&&i.vendor==="Apple Computer, Inc."&&/AppleWebKit\/5([0-2]|3[0-3])/.test(i.userAgent)),safariPoll:Boolean(!h.emulated.pushState&&i.vendor==="Apple Computer, Inc."&&/AppleWebKit\/5([0-2]|3[0-3])/.test(i.userAgent)),ieDoubleCheck:Boolean(h.isInternetExplorer()&&h.getInternetExplorerMajorVersion()<8),hashEscape:Boolean(h.isInternetExplorer()&&h.getInternetExplorerMajorVersion()<7)},h.isEmptyObject=function(e){for(var t in e)if(e.hasOwnProperty(t))return!1;return!0},h.cloneObject=function(e){var t,n;return e?(t=l.stringify(e),n=l.parse(t)):n={},n},h.getRootUrl=function(){var e=r.location.protocol+"//"+(r.location.hostname||r.location.host);if(r.location.port||!1)e+=":"+r.location.port;return e+="/",e},h.getBaseHref=function(){var e=r.getElementsByTagName("base"),t=null,n="";return e.length===1&&(t=e[0],n=t.href.replace(/[^\/]+$/,"")),n=n.replace(/\/+$/,""),n&&(n+="/"),n},h.getBaseUrl=function(){var e=h.getBaseHref()||h.getBasePageUrl()||h.getRootUrl();return e},h.getPageUrl=function(){var e=h.getState(!1,!1),t=(e||{}).url||h.getLocationHref(),n;return n=t.replace(/\/+$/,"").replace(/[^\/]+$/,function(e,t,n){return/\./.test(e)?e:e+"/"}),n},h.getBasePageUrl=function(){var e=h.getLocationHref().replace(/[#\?].*/,"").replace(/[^\/]+$/,function(e,t,n){return/[^\/]$/.test(e)?"":e}).replace(/\/+$/,"")+"/";return e},h.getFullUrl=function(e,t){var n=e,r=e.substring(0,1);return t=typeof t=="undefined"?!0:t,/[a-z]+\:\/\//.test(e)||(r==="/"?n=h.getRootUrl()+e.replace(/^\/+/,""):r==="#"?n=h.getPageUrl().replace(/#.*/,"")+e:r==="?"?n=h.getPageUrl().replace(/[\?#].*/,"")+e:t?n=h.getBaseUrl()+e.replace(/^(\.\/)+/,""):n=h.getBasePageUrl()+e.replace(/^(\.\/)+/,"")),n.replace(/\#$/,"")},h.getShortUrl=function(e){var t=e,n=h.getBaseUrl(),r=h.getRootUrl();return h.emulated.pushState&&(t=t.replace(n,"")),t=t.replace(r,"/"),h.isTraditionalAnchor(t)&&(t="./"+t),t=t.replace(/^(\.\/)+/g,"./").replace(/\#$/,""),t},h.getLocationHref=function(e){return e=e||r,e.URL===e.location.href?e.location.href:e.location.href===decodeURIComponent(e.URL)?e.URL:e.location.hash&&decodeURIComponent(e.location.href.replace(/^[^#]+/,""))===e.location.hash?e.location.href:e.URL.indexOf("#")==-1&&e.location.href.indexOf("#")!=-1?e.location.href:e.URL||e.location.href},h.store={},h.idToState=h.idToState||{},h.stateToId=h.stateToId||{},h.urlToId=h.urlToId||{},h.storedStates=h.storedStates||[],h.savedStates=h.savedStates||[],h.normalizeStore=function(){h.store.idToState=h.store.idToState||{},h.store.urlToId=h.store.urlToId||{},h.store.stateToId=h.store.stateToId||{}},h.getState=function(e,t){typeof e=="undefined"&&(e=!0),typeof t=="undefined"&&(t=!0);var n=h.getLastSavedState();return!n&&t&&(n=h.createStateObject()),e&&(n=h.cloneObject(n),n.url=n.cleanUrl||n.url),n},h.getIdByState=function(e){var t=h.extractId(e.url),n;if(!t){n=h.getStateString(e);if(typeof h.stateToId[n]!="undefined")t=h.stateToId[n];else if(typeof h.store.stateToId[n]!="undefined")t=h.store.stateToId[n];else{for(;;){t=(new Date).getTime()+String(Math.random()).replace(/\D/g,"");if(typeof h.idToState[t]=="undefined"&&typeof h.store.idToState[t]=="undefined")break}h.stateToId[n]=t,h.idToState[t]=e}}return t},h.normalizeState=function(e){var t,n;if(!e||typeof e!="object")e={};if(typeof e.normalized!="undefined")return e;if(!e.data||typeof e.data!="object")e.data={};return t={},t.normalized=!0,t.title=e.title||"",t.url=h.getFullUrl(e.url?e.url:h.getLocationHref()),t.hash=h.getShortUrl(t.url),t.data=h.cloneObject(e.data),t.id=h.getIdByState(t),t.cleanUrl=t.url.replace(/\??\&_suid.*/,""),t.url=t.cleanUrl,n=!h.isEmptyObject(t.data),(t.title||n)&&h.options.disableSuid!==!0&&(t.hash=h.getShortUrl(t.url).replace(/\??\&_suid.*/,""),/\?/.test(t.hash)||(t.hash+="?"),t.hash+="&_suid="+t.id),t.hashedUrl=h.getFullUrl(t.hash),(h.emulated.pushState||h.bugs.safariPoll)&&h.hasUrlDuplicate(t)&&(t.url=t.hashedUrl),t},h.createStateObject=function(e,t,n){var r={data:e,title:t,url:n};return r=h.normalizeState(r),r},h.getStateById=function(e){e=String(e);var n=h.idToState[e]||h.store.idToState[e]||t;return n},h.getStateString=function(e){var t,n,r;return t=h.normalizeState(e),n={data:t.data,title:e.title,url:e.url},r=l.stringify(n),r},h.getStateId=function(e){var t,n;return t=h.normalizeState(e),n=t.id,n},h.getHashByState=function(e){var t,n;return t=h.normalizeState(e),n=t.hash,n},h.extractId=function(e){var t,n,r,i;return e.indexOf("#")!=-1?i=e.split("#")[0]:i=e,n=/(.*)\&_suid=([0-9]+)$/.exec(i),r=n?n[1]||e:e,t=n?String(n[2]||""):"",t||!1},h.isTraditionalAnchor=function(e){var t=!/[\/\?\.]/.test(e);return t},h.extractState=function(e,t){var n=null,r,i;return t=t||!1,r=h.extractId(e),r&&(n=h.getStateById(r)),n||(i=h.getFullUrl(e),r=h.getIdByUrl(i)||!1,r&&(n=h.getStateById(r)),!n&&t&&!h.isTraditionalAnchor(e)&&(n=h.createStateObject(null,null,i))),n},h.getIdByUrl=function(e){var n=h.urlToId[e]||h.store.urlToId[e]||t;return n},h.getLastSavedState=function(){return h.savedStates[h.savedStates.length-1]||t},h.getLastStoredState=function(){return h.storedStates[h.storedStates.length-1]||t},h.hasUrlDuplicate=function(e){var t=!1,n;return n=h.extractState(e.url),t=n&&n.id!==e.id,t},h.storeState=function(e){return h.urlToId[e.url]=e.id,h.storedStates.push(h.cloneObject(e)),e},h.isLastSavedState=function(e){var t=!1,n,r,i;return h.savedStates.length&&(n=e.id,r=h.getLastSavedState(),i=r.id,t=n===i),t},h.saveState=function(e){return h.isLastSavedState(e)?!1:(h.savedStates.push(h.cloneObject(e)),!0)},h.getStateByIndex=function(e){var t=null;return typeof e=="undefined"?t=h.savedStates[h.savedStates.length-1]:e<0?t=h.savedStates[h.savedStates.length+e]:t=h.savedStates[e],t},h.getCurrentIndex=function(){var e=null;return h.savedStates.length<1?e=0:e=h.savedStates.length-1,e},h.getHash=function(e){var t=h.getLocationHref(e),n;return n=h.getHashByUrl(t),n},h.unescapeHash=function(e){var t=h.normalizeHash(e);return t=decodeURIComponent(t),t},h.normalizeHash=function(e){var t=e.replace(/[^#]*#/,"").replace(/#.*/,"");return t},h.setHash=function(e,t){var n,i;return t!==!1&&h.busy()?(h.pushQueue({scope:h,callback:h.setHash,args:arguments,queue:t}),!1):(h.busy(!0),n=h.extractState(e,!0),n&&!h.emulated.pushState?h.pushState(n.data,n.title,n.url,!1):h.getHash()!==e&&(h.bugs.setHash?(i=h.getPageUrl(),h.pushState(null,null,i+"#"+e,!1)):r.location.hash=e),h)},h.escapeHash=function(t){var n=h.normalizeHash(t);return n=e.encodeURIComponent(n),h.bugs.hashEscape||(n=n.replace(/\%21/g,"!").replace(/\%26/g,"&").replace(/\%3D/g,"=").replace(/\%3F/g,"?")),n},h.getHashByUrl=function(e){var t=String(e).replace(/([^#]*)#?([^#]*)#?(.*)/,"$2");return t=h.unescapeHash(t),t},h.setTitle=function(e){var t=e.title,n;t||(n=h.getStateByIndex(0),n&&n.url===e.url&&(t=n.title||h.options.initialTitle));try{r.getElementsByTagName("title")[0].innerHTML=t.replace("<","&lt;").replace(">","&gt;").replace(" & "," &amp; ")}catch(i){}return r.title=t,h},h.queues=[],h.busy=function(e){typeof e!="undefined"?h.busy.flag=e:typeof h.busy.flag=="undefined"&&(h.busy.flag=!1);if(!h.busy.flag){u(h.busy.timeout);var t=function(){var e,n,r;if(h.busy.flag)return;for(e=h.queues.length-1;e>=0;--e){n=h.queues[e];if(n.length===0)continue;r=n.shift(),h.fireQueueItem(r),h.busy.timeout=o(t,h.options.busyDelay)}};h.busy.timeout=o(t,h.options.busyDelay)}return h.busy.flag},h.busy.flag=!1,h.fireQueueItem=function(e){return e.callback.apply(e.scope||h,e.args||[])},h.pushQueue=function(e){return h.queues[e.queue||0]=h.queues[e.queue||0]||[],h.queues[e.queue||0].push(e),h},h.queue=function(e,t){return typeof e=="function"&&(e={callback:e}),typeof t!="undefined"&&(e.queue=t),h.busy()?h.pushQueue(e):h.fireQueueItem(e),h},h.clearQueue=function(){return h.busy.flag=!1,h.queues=[],h},h.stateChanged=!1,h.doubleChecker=!1,h.doubleCheckComplete=function(){return h.stateChanged=!0,h.doubleCheckClear(),h},h.doubleCheckClear=function(){return h.doubleChecker&&(u(h.doubleChecker),h.doubleChecker=!1),h},h.doubleCheck=function(e){return h.stateChanged=!1,h.doubleCheckClear(),h.bugs.ieDoubleCheck&&(h.doubleChecker=o(function(){return h.doubleCheckClear(),h.stateChanged||e(),!0},h.options.doubleCheckInterval)),h},h.safariStatePoll=function(){var t=h.extractState(h.getLocationHref()),n;if(!h.isLastSavedState(t))return n=t,n||(n=h.createStateObject()),h.Adapter.trigger(e,"popstate"),h;return},h.back=function(e){return e!==!1&&h.busy()?(h.pushQueue({scope:h,callback:h.back,args:arguments,queue:e}),!1):(h.busy(!0),h.doubleCheck(function(){h.back(!1)}),p.go(-1),!0)},h.forward=function(e){return e!==!1&&h.busy()?(h.pushQueue({scope:h,callback:h.forward,args:arguments,queue:e}),!1):(h.busy(!0),h.doubleCheck(function(){h.forward(!1)}),p.go(1),!0)},h.go=function(e,t){var n;if(e>0)for(n=1;n<=e;++n)h.forward(t);else{if(!(e<0))throw new Error("History.go: History.go requires a positive or negative integer passed.");for(n=-1;n>=e;--n)h.back(t)}return h};if(h.emulated.pushState){var v=function(){};h.pushState=h.pushState||v,h.replaceState=h.replaceState||v}else h.onPopState=function(t,n){var r=!1,i=!1,s,o;return h.doubleCheckComplete(),s=h.getHash(),s?(o=h.extractState(s||h.getLocationHref(),!0),o?h.replaceState(o.data,o.title,o.url,!1):(h.Adapter.trigger(e,"anchorchange"),h.busy(!1)),h.expectedStateId=!1,!1):(r=h.Adapter.extractEventData("state",t,n)||!1,r?i=h.getStateById(r):h.expectedStateId?i=h.getStateById(h.expectedStateId):i=h.extractState(h.getLocationHref()),i||(i=h.createStateObject(null,null,h.getLocationHref())),h.expectedStateId=!1,h.isLastSavedState(i)?(h.busy(!1),!1):(h.storeState(i),h.saveState(i),h.setTitle(i),h.Adapter.trigger(e,"statechange"),h.busy(!1),!0))},h.Adapter.bind(e,"popstate",h.onPopState),h.pushState=function(t,n,r,i){if(h.getHashByUrl(r)&&h.emulated.pushState)throw new Error("History.js does not support states with fragement-identifiers (hashes/anchors).");if(i!==!1&&h.busy())return h.pushQueue({scope:h,callback:h.pushState,args:arguments,queue:i}),!1;h.busy(!0);var s=h.createStateObject(t,n,r);return h.isLastSavedState(s)?h.busy(!1):(h.storeState(s),h.expectedStateId=s.id,p.pushState(s.id,s.title,s.url),h.Adapter.trigger(e,"popstate")),!0},h.replaceState=function(t,n,r,i){if(h.getHashByUrl(r)&&h.emulated.pushState)throw new Error("History.js does not support states with fragement-identifiers (hashes/anchors).");if(i!==!1&&h.busy())return h.pushQueue({scope:h,callback:h.replaceState,args:arguments,queue:i}),!1;h.busy(!0);var s=h.createStateObject(t,n,r);return h.isLastSavedState(s)?h.busy(!1):(h.storeState(s),h.expectedStateId=s.id,p.replaceState(s.id,s.title,s.url),h.Adapter.trigger(e,"popstate")),!0};if(s){try{h.store=l.parse(s.getItem("History.store"))||{}}catch(m){h.store={}}h.normalizeStore()}else h.store={},h.normalizeStore();h.Adapter.bind(e,"unload",h.clearAllIntervals),h.saveState(h.storeState(h.extractState(h.getLocationHref(),!0))),s&&(h.onUnload=function(){var e,t,n;try{e=l.parse(s.getItem("History.store"))||{}}catch(r){e={}}e.idToState=e.idToState||{},e.urlToId=e.urlToId||{},e.stateToId=e.stateToId||{};for(t in h.idToState){if(!h.idToState.hasOwnProperty(t))continue;e.idToState[t]=h.idToState[t]}for(t in h.urlToId){if(!h.urlToId.hasOwnProperty(t))continue;e.urlToId[t]=h.urlToId[t]}for(t in h.stateToId){if(!h.stateToId.hasOwnProperty(t))continue;e.stateToId[t]=h.stateToId[t]}h.store=e,h.normalizeStore(),n=l.stringify(e);try{s.setItem("History.store",n)}catch(i){if(i.code!==DOMException.QUOTA_EXCEEDED_ERR)throw i;s.length&&(s.removeItem("History.store"),s.setItem("History.store",n))}},h.intervalList.push(a(h.onUnload,h.options.storeInterval)),h.Adapter.bind(e,"beforeunload",h.onUnload),h.Adapter.bind(e,"unload",h.onUnload));if(!h.emulated.pushState){h.bugs.safariPoll&&h.intervalList.push(a(h.safariStatePoll,h.options.safariPollInterval));if(i.vendor==="Apple Computer, Inc."||(i.appCodeName||"")==="Mozilla")h.Adapter.bind(e,"hashchange",function(){h.Adapter.trigger(e,"popstate")}),h.getHash()&&h.Adapter.onDomLoad(function(){h.Adapter.trigger(e,"hashchange")})}},(!h.options||!h.options.delayInit)&&h.init()})(window);
(function(e,t){"use strict";var n=e.History=e.History||{},r=e.jQuery;if(typeof n.Adapter!="undefined")throw new Error("History.js Adapter has already been loaded...");n.Adapter={bind:function(e,t,n){r(e).bind(t,n)},trigger:function(e,t,n){r(e).trigger(t,n)},extractEventData:function(e,n,r){var i=n&&n.originalEvent&&n.originalEvent[e]||r&&r[e]||t;return i},onDomLoad:function(e){r(e)}},typeof n.init!="undefined"&&n.init()})(window);
/**
 * Main JS for saving calculator
 */
(function ($) {
  Drupal.behaviors.sunrunCalculator = {
    attach: function (context, settings) {

      $('.savings-calculator', context).once('sunrun-calculator', function () {
        // Form elements
        var $initial = $(this).find('.step.initial');
        var $results = $(this).find('.step.results');
        var address = '';

        // Build marketo form
        if (typeof(MktoForms2) !== 'undefined') {
          MktoForms2.loadForm(settings.sunrun_calculator.environment, settings.sunrun_calculator.munchkin_id, settings.sunrun_calculator.form_id, function (form) {

            if (typeof(settings.sunrun_calculator.zipcode) !== 'undefined') {
              form.vals({"PostalCode": settings.sunrun_calculator.zipcode});
            }

            $('#Monthly_Electricity_Bill__c').closest('.mktoFormRow').addClass('hide');
            $('#Referral_web_form__c').closest('.mktoCheckboxList').find('label').text('I was referred to Sunrun by a friend or family member');
            jQuery(".mktoForm, .mktoForm *").removeAttr("style");

            var formElement = form.getFormElem();
            formElement.find(".mktoButtonRow").after("<p class='form-autodialer-opt-in'>By clicking above, I authorize Sunrun to call me or send pre-recorded or text messages to me about Sunrun products and services at the telephone number above using an automatic telephone dialing system, even if I am on a national or state \"Do Not Call\" list. Message and data rates may apply. I understand that consent is not a condition of purchase.</p>"
            );

            form.onValidate(function (values) {
              var vals = form.vals();
              var zipPattern = /(^\d{5}$)/;
              var numbersPattern = /^[0-9]+$/;
              var phonePattern = /^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/;
              var emailPattern = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
              var hasErrors = false;
              // Avoid undefined errors
              var firstNameField  = 'FirstName' in vals ? vals.FirstName : '';
              var lastNameField   = 'LastName' in vals ? vals.LastName : '';
              var postalCodeField = 'PostalCode' in vals ? vals.PostalCode : '';
              var streetField     = 'Street' in vals ? vals.Street : '';
              var emailField      = 'Email' in vals ? vals.Email : '';
              var phoneField      = 'Phone' in vals ? vals.Phone : '';

              if (firstNameField.length == 0) {
                var firstName = formElement.find("#FirstName");
                showError('#FirstName', 'Please enter your first name.', firstName);
                hasErrors = true;
              } else {
                removeError('#FirstName');
              }

              if (lastNameField.length == 0) {
                var lastName = formElement.find("#LastName");
                showError('#LastName', 'Please enter your last name.', lastName);
                hasErrors = true;
              } else {
                removeError('#LastName');
              }

              if (!( emailPattern.test(emailField) )) {
                var email = formElement.find("#Email");
                showError('#Email', 'Please enter a valid email address.', email);
                hasErrors = true;
              } else {
                removeError('#Email');
              }

              if (!( phonePattern.test(phoneField) )) {
                var phone = formElement.find("#Phone");
                showError('#Phone', 'Please enter a valid phone number.', phone);
                hasErrors = true;
              } else {
                removeError('#Phone');
              }

              if (!( zipPattern.test(postalCodeField) )) {
                var zipCode = formElement.find("#PostalCode");
                showError('#PostalCode', 'Please enter a valid zip code.', zipCode);
                hasErrors = true;
              } else if (zipcodes.indexOf(postalCodeField) < 0) {
                hasErrors = true;
                var postalCode = formElement.find("#PostalCode");
                showError('#PostalCode', 'We\'re sorry! Sunrun is not yet available where you live. We will send you an email when Sunrun becomes available in your area.', postalCode);
              } else {
                removeError('#PostalCode');
              }

              if (streetField.length == 0) {
                var street = formElement.find("#Street");
                showError('#Street', 'Please enter a street address.', street);
                hasErrors = true;
              } else {
                removeError('#Street');
              }
              // Do not allow submit if the form has validation errors
              if(hasErrors){
                form.submittable(false);
              } else {
                form.submittable(true);
              }
            });

            //Add an onSuccess handler
            form.onSuccess(function (values, followUpUrl) {
              // Avoid undefined errors
              var firstName  = 'FirstName' in values ? values.FirstName : null;
              var lastName   = 'LastName' in values ? values.LastName : null;
              var postalCode = 'PostalCode' in values ? values.PostalCode : null;
              var street     = 'Street' in values ? values.Street : null;
              var email      = 'Email' in values ? values.Email : null;
              // Redirect if service is not available
              if (zipcodes.indexOf(postalCode) < 0) {
                window.location.href = Drupal.settings.basePath + Drupal.settings.sunrun_calculator.url_available;
                return false;
              }

              ga('send', 'event', 'calculator', 'step 1', 'submit success');

              dataLayer.push({'event' : 'lead-form-submitted'});

              genability = new GenabilityApi(email);
              genability.createAccount(firstName, lastName, postalCode, street);

              var loading = "<div class=\"results-loading\">" +
                "<img src=\"/sites/default/themes/sunrun/public/assets/images/gears.svg\">" +
                "<img src=\"/sites/default/themes/sunrun/public/assets/images/sunrun-logo-footer.png\">" +
                "<p>Calculating your savings</p>" +
                "</div>";
              $(loading).appendTo('body');
              $('h1.pane-title').hide();
              // return false to prevent the submission handler from taking the lead to the follow up url.
              return false;
            });
          });

        }

        function showError(field, text, ref) {
          if (!$(field).closest('.mktoFormRow').children('.error').length) {
            ref.closest('.mktoFormRow').append('<div class="error">' + text + '</div>');
          }
        }

        function removeError(field) {
          if ($(field).closest('.mktoFormRow').children('.error').length) {
            $(field).closest('.mktoFormRow').children('.error').remove();
          }
        }

        var GenabilityApi = function (email) {
          var username = Drupal.settings.sunrun_calculator.genability_username;
          var password = Drupal.settings.sunrun_calculator.genability_password;
          var uuid = makeid(15)
          var email = email + "-" + uuid;

          this.createAccount = function (name, lastname, zipcode, street) {

            address = street + " " + zipcode;
            //console.log(address);
            var accountParams = {
              "providerAccountId": email,
              "accountName": name + ' ' + lastname,
              "address": {
                "addressString": address
              },
              "properties": {
                "customerClass": {
                  "keyName": "customerClass",
                  "dataValue": "1" //residential
                },
                "zipCode": {
                  "keyName": "zipCode",
                  "dataType": null,
                  "fromDateTime": null,
                  "toDateTime": null,
                  "dataValue": zipcode
                },
                "buildingTypeResidential": {
                  "keyName": "buildingTypeResidential",
                  "dataValue": "singleFamilyAttached"
                }
              }
            }

            var url = '//api.genability.com/rest/v1/accounts?appId=' + username + '&appKey=' + password;
            $.ajax({
              type: 'POST',
              contentType: "application/json",
              crossDomain: true,
              dataType: "json",
              url: url,
              data: JSON.stringify(accountParams),
              success: function (data) {
                // Push history
                History.pushState({step: 'results'}, null, null);
                getSavings();
                getOwnershipData();
              },
              error: function (xhr, ajaxOptions, thrownError) {
                errorRedirect();
              }
            });
          }

          function getSavings() {

            var mapOptions = {
              scrollwheel: false,
              navigationControl: false,
              mapTypeControl: false,
              scaleControl: false,
              draggable: false,
              disableDoubleClickZoom: true,
              zoom: 17,
              disableDefaultUI: true,
              mapTypeId: google.maps.MapTypeId.SATELLITE
            }

            var geocoder = new google.maps.Geocoder();
            var state;
            geocoder.geocode({'address': address}, function (results, status) {
              if (status == google.maps.GeocoderStatus.OK) {
                $('.map-canvas').each(function (idx, val) {
                  var map = new google.maps.Map($(this)[0], mapOptions);

                  // Retrieve starting location of map
                  // and use to set center; and default lat/long
                  // for form.
                  var location = results[0].geometry.location;
                  map.setCenter(location);

                  var full_address = results[0].address_components;
                  var index = full_address.length;
                  do {
                    index--;
                    var element = full_address[index];
                    if (element.types[0] === "administrative_area_level_1") {
                      state = element.short_name;
                    }
                  } while (!state && index);
                  $initial.hide();
                  $results.removeClass('hide');
                  $('.bean-hero-banner').hide();
                  $results.find('.address').html(results[0].formatted_address.replace(', USA', ''));

                  var rateData = {
                    "AZ": [
                      {
                        "rate": 0.120,
                        "escalator": 1.9
                      }
                    ],
                    "CA": [
                      {
                        "rate": 0.15,
                        "escalator": 2.9
                      }
                    ],
                    "CO": [
                      {
                        "rate": 0.152,
                        "escalator": 1.9
                      }
                    ],
                    "CT": [
                      {
                        "rate": 0.160,
                        "escalator": 1.9
                      }
                    ],
                    "HI": [
                      {
                        "rate": 0.19,
                        "escalator": 2.9
                      }
                    ],
                    "MA": [
                      {
                        "rate": 0.13,
                        "escalator": 2.9
                      }
                    ],
                    "MD": [
                      {
                        "rate": 0.11,
                        "escalator": 2.9
                      }
                    ],
                    "NH": [
                      {
                        "rate": 0.14,
                        "escalator": 2.9
                      }
                    ],
                    "NJ": [
                      {
                        "rate": 0.13,
                        "escalator": 2.9
                      }
                    ],
                    "NV": [
                      {
                        "rate": 0.105,
                        "escalator": 2.9
                      }
                    ],
                    "NY": [
                      {
                        "rate": 0.160,
                        "escalator": 2.9
                      }
                    ],
                    "OR": [
                      {
                        "rate": 0.11,
                        "escalator": 2.9
                      }
                    ],
                    "PA": [
                      {
                        "rate": 0.16,
                        "escalator": 2.9
                      }
                    ],
                    "SC": [
                      {
                        "rate": 0.11,
                        "escalator": 2.9
                      }
                    ]
                  }

                  var fromDate = new Date();
                  var savingsParams = {
                    "providerAccountId": email,
                    "fromDateTime": fromDate,
                    "populateCosts": true,
                    "propertyInputs": [
                      {
                        "scenarios": "before,after",
                        "keyName": "rateInflation",
                        "dataValue": "3.5"
                      },
                      {
                        "scenarios": "solar",
                        "keyName": "rateInflation",
                        "dataValue": rateData[state][0].escalator
                      },
                      {
                        "scenarios": "after,solar",
                        "keyName": "solarDegradation",
                        "dataValue": "1.5"
                      },
                      {
                        "scenarios": "before,after,solar",
                        "keyName": "baselineType",
                        "dataValue": "TYPICAL"
                      }
                    ],
                    "rateInputs": [
                      {
                        "scenarios": "solar",
                        "chargeType": "CONSUMPTION_BASED",
                        "rateBands": [
                          {
                            "rateAmount": rateData[state][0].rate
                          }
                        ]
                      }
                    ]
                  }

                  var url = '//api.genability.com/rest/v1/accounts/analysis?appId=' + username + '&appKey=' + password;
                  $.ajax({
                    type: 'POST',
                    contentType: "application/json",
                    crossDomain: true,
                    dataType: "json",
                    data: JSON.stringify(savingsParams),
                    url: url,
                    success: function (data) {
                      //getOwnershipData(data);
                      renderResultsPPA(data);
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                      errorRedirect();
                    }
                  });
                });

              }
            });

          }

          function getOwnershipData() {
            var fromDate = new Date();
            var savingsParams = {
              "providerAccountId": email,
              "fromDateTime": fromDate,
              "populateCosts": true,
              "propertyInputs": [
                {
                  "scenarios": "before,after",
                  "keyName": "rateInflation",
                  "dataValue": "3.5"
                },
                {
                  "scenarios": "solar",
                  "keyName": "rateInflation",
                  "dataValue": "1.9"
                },
                {
                  "scenarios": "after,solar",
                  "keyName": "solarDegradation",
                  "dataValue": "1.5"
                },
                {
                  "scenarios": "before,after,solar",
                  "keyName": "baselineType",
                  "dataValue": "TYPICAL"
                }
              ],
              "rateInputs": [
                {
                  "scenarios": "solar",
                  "chargeType": "FIXED_PRICE",
                  "rateBands": [
                    {
                      "rateAmount": 0
                    }
                  ]
                }
              ]
            }

            var url = '//api.genability.com/rest/v1/accounts/analysis?appId=' + username + '&appKey=' + password;
            console.log(url);
            $.ajax({
              type: 'POST',
              contentType: "application/json",
              crossDomain: true,
              dataType: "json",
              data: JSON.stringify(savingsParams),
              url: url,
              success: function (data) {
                renderResultsOwnership(data);
              },
              error: function (xhr, ajaxOptions, thrownError) {
                errorRedirect();
              }
            });
          }

          // Render results to the UI
          function renderResultsPPA(data) {
            //console.log(data);
            var summaryPPA = data.results[0].summary;
            var seriesPPA = data.results[0].series;
            var seriesCostsPPA = data.results[0].seriesCosts;

            // PPA values
            var assumptionsPPA = seriesCostsPPA[2].assumptions;
            var systemSizePPA;
            var index = assumptionsPPA.length;
            do {
              index--;
              var element = assumptionsPPA[index];
              if (element.keyName === "systemSize") {
                systemSizePPA = parseFloat(element.dataValue);
              }
            } while (!systemSizePPA && index);


            var annualProductionPPA = seriesPPA[2].qty; //After Solar Utility (Mo/Year 1)
            var percentOffsetPPA = summaryPPA.netAvoidedKWhPctOffset * 100;
            var lifetimeSolarCostPPA = Math.round((seriesPPA[6].cost + seriesPPA[9].cost) / 1000) * 1000; //Solar (Annual/Lifetime) + After Solar Utility (Lifetime)
            var lifetimeWithoutCostPPA = Math.round(seriesPPA[8].cost / 1000) * 1000; //Before Solar Utility (Lifetime)
            var lifetimeAvoidedCostPPA = summaryPPA.lifetimeAvoidedCost;
            var monthlyPaymentPrePPA = seriesPPA[0].cost / 12;
            var upfrontAmountPPA = accounting.formatMoney(0, {precision: 0});
            var lifetimeSavingsPPA = lifetimeWithoutCostPPA - lifetimeSolarCostPPA;//lifetimeAvoidedCostPPA;
            var monthlyPaymentPPA = (seriesPPA[1].cost / 12) + (seriesPPA[2].cost / 12);
            var savingsPercentPPA = monthlyPaymentPPA / monthlyPaymentPrePPA * 100;
            // Redirect if pay-as-you-go savings is less than 5000
            if ( lifetimeSavingsPPA < 5000 ) {
               window.location.href = Drupal.settings.basePath + Drupal.settings.sunrun_calculator.url_lifetime;
            }
            $results.find('.payg .system-size .value').html(systemSizePPA.toFixed(1) + " kW");
            $results.find('.payg .annual-production .value').html(Math.round(annualProductionPPA.toFixed(0) / 100) * 100 + " kWh");
            $results.find('.payg .percent-offset .value').html(percentOffsetPPA.toFixed(0) + "%");
            $results.find('.payg .electric-bill .value').html(accounting.formatMoney(lifetimeWithoutCostPPA, {precision: 0}));
            $results.find('.payg .electric-bill-sunrun .value').html(accounting.formatMoney(lifetimeSolarCostPPA, {precision: 0}));
            $results.find('.payg .down-payment .value').html(upfrontAmountPPA);
            $results.find('.payg .lifetime-savings .savings-value').html(accounting.formatMoney(lifetimeSavingsPPA, {precision: 0}));
            $results.find('.payg .lifetime-savings-inline').html(accounting.formatMoney(lifetimeSavingsPPA, {precision: 0}));
            $results.find('.payg .monthly.solar .value').html("New Bill: " + accounting.formatMoney(monthlyPaymentPPA, {precision: 0}));
            $results.find('.payg .monthly.without-solar .value').html("Old Bill: " + accounting.formatMoney(monthlyPaymentPrePPA, {precision: 0}));
            $results.find('.payg .average-monthly-savings-inline').html((100 - savingsPercentPPA.toFixed(0)) + '%');

            //generate average monthly savings bar for PPA
            var savingsBarWidth = $results.find('.payg .savings-bar').width();
            var monthlySolarWidth = $results.find('.payg .monthly.solar').outerWidth();
            var monthlySolarWithoutWidth = $results.find('.payg .monthly.without-solar').outerWidth();

            $results.find('.payg .green').css('width', savingsPercentPPA.toFixed(0) + '%');
            $results.find('.payg .monthly.solar').css('left', savingsPercentPPA.toFixed(0) + '%').css('margin-left', '-' + monthlySolarWidth / 2 + 'px');
            $results.find('.payg .monthly.without-solar').css('left', savingsBarWidth).css('margin-left', '-' + monthlySolarWithoutWidth / 2 + 'px');

            if ($('.savings-calculator .step-2 .results-all').css('margin-bottom') == '0px') {
              //set the height of all boxes to the height of the tallest box if on desktop
              var height = Math.max(
                $results.find('.benefits').outerHeight(),
                $results.find('.lifetime-savings').outerHeight(),
                $results.find('.average-monthly-savings').outerHeight(),
                $results.find('.your-home-details').outerHeight()
              );
              $results.find('.results-all').outerHeight(height);
            }

            //set the savings dial images
            var imageUrl = '/sites/default/themes/sunrun/public/assets/images/savings-dials.svg';
            var roundUpPPA = Math.ceil((100 - savingsPercentPPA) / 10) * 10;
            $results.find('.savings-dial').css('background-image', 'url("' + imageUrl + '")');
            $results.find('.payg .savings-dial-sunrun').css('background-image', 'url("' + imageUrl + '")').addClass('save-' + roundUpPPA + '-percent');

            $.each(data.results[0].summary, function (key, value) {
              //$results.find('.results-all').append('<strong>' + key + ':</strong> ' + accounting.format(value) + '</br>');
            });

            var $ownershipLink = $results.find('.link-ownership');
            var $paygLink = $results.find('.link-payg');
            var $ownershipResults = $results.find('.ownership');
            var $payResults = $results.find('.payg');

            $ownershipLink.on('click', function () {
              $paygLink.removeClass('active');
              $ownershipLink.addClass('active');
              $ownershipResults.removeClass('hide');
              var monthlySolarWithoutWidth = $results.find('.ownership .monthly.without-solar').outerWidth();
              $results.find('.ownership .monthly.without-solar').css('left', savingsBarWidth).css('margin-left', '-' + monthlySolarWithoutWidth / 2 + 'px');
              $payResults.addClass('hide');
              return false;
            });

            $paygLink.on('click', function () {
              $ownershipLink.removeClass('active');
              $paygLink.addClass('active');
              $payResults.removeClass('hide');
              $ownershipResults.addClass('hide');
              return false;
            });
            window.scrollTo(0, 0);
            $('.breadcrumbs').hide();
            $('.results-loading').addClass('hide');
          }

          function renderResultsOwnership(data) {
            //$initial.hide();
            //$results.removeClass('hide');
            //window.scrollTo(0,0);
            //$('.results-loading').addClass('hide');

            var summaryOwnership = data.results[0].summary;
            var seriesOwnership = data.results[0].series;
            var seriesCostsOwnership = data.results[0].seriesCosts;

            //Cash ownership values
            var assumptionsOwnership = seriesCostsOwnership[2].assumptions;
            var systemSizeOwnership;
            var index = assumptionsOwnership.length;
            do {
              index--;
              var element = assumptionsOwnership[index];
              if (element.keyName === "systemSize") {
                systemSizeOwnership = parseFloat(element.dataValue);
              }
            } while (!systemSizeOwnership && index);

            var annualProductionOwnership = seriesOwnership[2].qty; //After Solar Utility (Mo/Year 1)
            var percentOffsetOwnership = summaryOwnership.netAvoidedKWhPctOffset * 100;
            var lifetimeSolarCostOwnership = Math.round(((5.5 * (systemSizeOwnership * 1000)) + seriesOwnership[9].cost) / 1000) * 1000; //Solar (Annual/Lifetime) + After Solar Utility (Lifetime)
            var lifetimeWithoutCostOwnership = Math.round(seriesOwnership[8].cost / 1000) * 1000; //Before Solar Utility (Lifetime)
            var lifetimeAvoidedCostOwnership = summaryOwnership.lifetimeAvoidedCost;
            var monthlyPaymentPreOwnership = seriesOwnership[0].cost / 12;
            var upfrontAmountOwnership = accounting.formatMoney(Math.round(5.5 * (systemSizeOwnership * 1000) / 1000) * 1000, {precision: 0});
            var monthlyPaymentOwnership = seriesOwnership[1].cost / 12;
            var lifetimeSavingsOwnership = lifetimeWithoutCostOwnership - lifetimeSolarCostOwnership;
            var savingsPercentOwnership = monthlyPaymentOwnership / monthlyPaymentPreOwnership * 100;
            // Redirect if ownership savings is less than 0
            if ( lifetimeSavingsOwnership < 0 ) {
               window.location.href = Drupal.settings.basePath + Drupal.settings.sunrun_calculator.url_lifetime;
            }
            $results.find('.ownership .system-size .value').html(systemSizeOwnership.toFixed(1) + " kW");
            $results.find('.ownership .annual-production .value').html(Math.round(annualProductionOwnership.toFixed(0) / 100) * 100 + " kWh");
            $results.find('.ownership .percent-offset .value').html(percentOffsetOwnership.toFixed(0) + "%");
            $results.find('.ownership .electric-bill .value').html(accounting.formatMoney(lifetimeWithoutCostOwnership, {precision: 0}));
            $results.find('.ownership .electric-bill-sunrun .value').html(accounting.formatMoney(lifetimeSolarCostOwnership, {precision: 0}));
            $results.find('.ownership .down-payment .value').html(upfrontAmountOwnership);
            $results.find('.ownership .lifetime-savings .savings-value').html(accounting.formatMoney(lifetimeSavingsOwnership, {precision: 0}));
            $results.find('.ownership .lifetime-savings-inline').html(accounting.formatMoney(lifetimeSavingsOwnership, {precision: 0}));
            $results.find('.ownership .monthly.solar .value').html("New Bill: " + accounting.formatMoney(monthlyPaymentOwnership, {precision: 0}));
            $results.find('.ownership .monthly.without-solar .value').html("Old Bill: " + accounting.formatMoney(monthlyPaymentPreOwnership, {precision: 0}));
            $results.find('.ownership .average-monthly-savings-inline').html(100 - savingsPercentOwnership.toFixed(0) + '%');

            //generate average monthly savings bar for Ownership
            $results.find('.ownership .green').css('width', savingsPercentOwnership + '%');
            $results.find('.ownership .monthly.solar').css('left', '0').css('margin-left', '-15px');

            //set the savings dial images
            var imageUrl = '/sites/default/themes/sunrun/public/assets/images/savings-dials.svg';
            var roundUpOwnership = Math.ceil((100 - ((lifetimeSolarCostOwnership / lifetimeWithoutCostOwnership) * 100)) / 10) * 10;
            $results.find('.ownership .savings-dial-sunrun').css('background-image', 'url("' + imageUrl + '")').addClass('save-' + roundUpOwnership + '-percent');

            $.each(data.results[0].summary, function (key, value) {
              //$results.find('.results-all').append('<strong>' + key + ':</strong> ' + accounting.format(value) + '</br>');
            });

            var $ownershipLink = $results.find('.link-ownership');
            var $paygLink = $results.find('.link-payg');
            var $ownershipResults = $results.find('.ownership');
            var $payResults = $results.find('.payg');

            $ownershipLink.on('click', function () {
              $paygLink.removeClass('active');
              $ownershipLink.addClass('active');
              $ownershipResults.removeClass('hide');
              var savingsBarWidth = $results.find('.ownership .savings-bar').width();
              var monthlySolarWidth = $results.find('.ownership .monthly.solar').outerWidth();
              var monthlySolarWithoutWidth = $results.find('.ownership .monthly.without-solar').outerWidth();
              $results.find('.ownership .monthly.solar').css('left', savingsPercentOwnership.toFixed(0) + '%').css('margin-left', '-' + monthlySolarWidth / 2 + 'px');
              $results.find('.ownership .monthly.without-solar').css('left', savingsBarWidth).css('margin-left', '-' + monthlySolarWithoutWidth / 2 + 'px');
              $payResults.addClass('hide');
              return false;
            });

            $paygLink.on('click', function () {
              $ownershipLink.removeClass('active');
              $paygLink.addClass('active');
              $payResults.removeClass('hide');
              $ownershipResults.addClass('hide');
              return false;
            });
          }

          function errorRedirect()
          {
            window.location.replace(Drupal.settings.sunrun_calculator.error_redirect_url);
          }
        }

        function makeid(x) {
          var text = "";
          var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

          for (var i = 0; i < x; i++)
            text += possible.charAt(Math.floor(Math.random() * possible.length));

          return text;
        }

        //genability = new GenabilityApi('justin.nethers+ituh@gmail.com');
        //genability.createAccount('Justin', 'Nethers', '06880', '44 Kings Hwy S');

      });
    }
  }
})(jQuery);

/**
 * History events
 */
(function(window, undefined){
  // Initial State
  History.pushState({step: 'initial'}, null, null);
  // Bind to State Change
  History.Adapter.bind(window, 'statechange', function(){
    // Get
    var state = History.getState();
    // If we are on initial step reload the page
    if(state.data.step == 'initial'){
      window.location.reload();
    }
  });
})(window);
;
